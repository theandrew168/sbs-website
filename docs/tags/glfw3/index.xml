<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>GLFW3 on Shallow Brook Software</title><link>https://shallowbrooksoftware.com/tags/glfw3/</link><description>Recent content in GLFW3 on Shallow Brook Software</description><generator>Hugo</generator><language>en</language><lastBuildDate>Sun, 07 Jun 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://shallowbrooksoftware.com/tags/glfw3/index.xml" rel="self" type="application/rss+xml"/><item><title>A Multi-Platform Modern OpenGL Demo with SDL2</title><link>https://shallowbrooksoftware.com/posts/a-multi-platform-modern-opengl-demo-with-sdl2/</link><pubDate>Sun, 07 Jun 2020 00:00:00 +0000</pubDate><guid>https://shallowbrooksoftware.com/posts/a-multi-platform-modern-opengl-demo-with-sdl2/</guid><description>&lt;p>This post is largely inspired by &lt;a href="https://nullprogram.com/" class="external-link" target="_blank" rel="noopener">Chris Wellons&amp;rsquo;&lt;/a> 2015 blog post about writing a &lt;a href="https://nullprogram.com/blog/2015/06/06/" class="external-link" target="_blank" rel="noopener">modern OpenGL demo&lt;/a> that works on all three major desktop platforms (Windows, macOS, and Linux).
I have come back to his post countless times over the years when looking for guidance on how to build any cross-platform C program.&lt;/p>
&lt;p>In Chris&amp;rsquo; version of this demo he makes use of &lt;a href="https://www.glfw.org/" class="external-link" target="_blank" rel="noopener">GLFW3&lt;/a> for the window and input handling and uses &lt;a href="https://github.com/skaslev/gl3w" class="external-link" target="_blank" rel="noopener">gl3w&lt;/a> for loading &lt;a href="https://www.opengl.org/" class="external-link" target="_blank" rel="noopener">OpenGL&lt;/a> functions.
I have used GLFW3 in the past, but tend to prefer &lt;a href="https://www.libsdl.org/" class="external-link" target="_blank" rel="noopener">SDL2&lt;/a> for its &lt;a href="https://wiki.libsdl.org/Introduction" class="external-link" target="_blank" rel="noopener">wealth of features&lt;/a> and &lt;a href="https://wiki.libsdl.org/SDL_PollEvent" class="external-link" target="_blank" rel="noopener">polling-based event model&lt;/a>.
Therefore, in my version, I wanted to use SDL2 for the window and input handling and load the OpenGL functions myself.
Loading OpenGL functions is a fiddly, quirky topic that deserves its own &lt;a href="https://shallowbrooksoftware.com/posts/loading-opengl-fuctions-for-fun-and-profit/" >blog post&lt;/a>.
However, it doesn&amp;rsquo;t require too much code once the nuances are understood.&lt;/p></description></item></channel></rss>