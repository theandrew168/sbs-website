<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>TypeScript on Shallow Brook Software</title><link>https://shallowbrooksoftware.com/tags/typescript/</link><description>Recent content in TypeScript on Shallow Brook Software</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Sun, 03 Mar 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://shallowbrooksoftware.com/tags/typescript/index.xml" rel="self" type="application/rss+xml"/><item><title>Behavioral Abstractions in TypeScript</title><link>https://shallowbrooksoftware.com/posts/behavioral-abstractions-in-typescript/</link><pubDate>Sun, 03 Mar 2024 00:00:00 +0000</pubDate><guid>https://shallowbrooksoftware.com/posts/behavioral-abstractions-in-typescript/</guid><description>Almost every application needs to communicate with the outside world in one form or another. It could be by scraping a web page, hitting a REST API, or simply talking to a database. If an application depends on the specific details of any of these communications, however, then it becomes much more difficult to test. Instead, a program&amp;rsquo;s domain logic should depend on abstract behaviors instead of concrete implementations. I think that this is one of the most important facets of system design.</description></item></channel></rss>