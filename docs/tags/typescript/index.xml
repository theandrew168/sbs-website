<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>TypeScript on Shallow Brook Software</title><link>https://shallowbrooksoftware.com/tags/typescript/</link><description>Recent content in TypeScript on Shallow Brook Software</description><generator>Hugo</generator><language>en</language><lastBuildDate>Sun, 18 Aug 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://shallowbrooksoftware.com/tags/typescript/index.xml" rel="self" type="application/rss+xml"/><item><title>Brain Dump: BFFs and N+1 API Calls</title><link>https://shallowbrooksoftware.com/posts/brain-dump-bffs-and-api-calls/</link><pubDate>Sun, 18 Aug 2024 00:00:00 +0000</pubDate><guid>https://shallowbrooksoftware.com/posts/brain-dump-bffs-and-api-calls/</guid><description>&lt;p>Writing software is hard.
Sometimes, I&amp;rsquo;ll find myself stuck on a problem for days or even weeks.
When that happens, I find it useful to write out everything I know about the problem: the nuances, possible solutions, external references, etc.
My most recent head-scratcher has been about balancing &amp;ldquo;purist&amp;rdquo; REST API design with the needs of a web frontend.
I&amp;rsquo;m beginning to realize a truth: &lt;strong>they are different&lt;/strong>.
As always, I&amp;rsquo;m talking about &lt;a href="https://bloggulus.com" class="external-link" target="_blank" rel="noopener">Bloggulus&lt;/a>.&lt;/p></description></item><item><title>Parsing Recursive Polymorphic JSON in Go</title><link>https://shallowbrooksoftware.com/posts/parsing-recursive-polymorphic-json-in-go/</link><pubDate>Sun, 19 May 2024 00:00:00 +0000</pubDate><guid>https://shallowbrooksoftware.com/posts/parsing-recursive-polymorphic-json-in-go/</guid><description>&lt;p>Recently, I was helping a friend design a system for matching text against a flexible system of rules.
For example, I might want to know if a piece text contains the word &amp;ldquo;foo&amp;rdquo; or the word &amp;ldquo;bar&amp;rdquo;.
A rule can either be a single regex pattern or a series of patterns combined with a logical operation (&lt;code>AND&lt;/code>, &lt;code>OR&lt;/code>, or &lt;code>NOT&lt;/code>).
We&amp;rsquo;ll call this first rule &lt;code>Basic&lt;/code> and the second one &lt;code>Composite&lt;/code>.
Since the composite rule can contain both basic and other composite rules, we need a third type to represent &amp;ldquo;can be either basic or composite&amp;rdquo;.
We&amp;rsquo;ll call this type &lt;code>Rule&lt;/code>.&lt;/p></description></item><item><title>A Multi-Platform Modern WebGL Demo</title><link>https://shallowbrooksoftware.com/posts/a-multi-platform-modern-webgl-demo/</link><pubDate>Sun, 31 Mar 2024 00:00:00 +0000</pubDate><guid>https://shallowbrooksoftware.com/posts/a-multi-platform-modern-webgl-demo/</guid><description>&lt;p>Nearly four years ago I wrote a &lt;a href="https://shallowbrooksoftware.com/posts/a-multi-platform-modern-opengl-demo-with-sdl2/" >blog post&lt;/a> about a native, cross-platform OpenGL demo that I&amp;rsquo;d written.
That post (which was only my second ever) was actually a response to &lt;em>another&lt;/em> &lt;a href="https://nullprogram.com/blog/2015/06/06/" class="external-link" target="_blank" rel="noopener">blog post&lt;/a> written by Chris Wellons (aka &lt;a href="https://nullprogram.com/" class="external-link" target="_blank" rel="noopener">null program&lt;/a>) on the same topic.
Back then, I spent &lt;strong>hours and hours&lt;/strong> just trying to figure out how I could write (and compile) a single C program that would run on all three major platforms: Windows, macOS, and Linux.
Chris used &lt;a href="https://www.glfw.org/" class="external-link" target="_blank" rel="noopener">GLFW3&lt;/a> to solve this problem while mine used &lt;a href="https://www.libsdl.org/" class="external-link" target="_blank" rel="noopener">SDL2&lt;/a> (both are valid options).
Here is a screenshot of the demo for reference:&lt;/p></description></item><item><title>Testing with Transactions</title><link>https://shallowbrooksoftware.com/posts/testing-with-transactions/</link><pubDate>Sun, 24 Mar 2024 00:00:00 +0000</pubDate><guid>https://shallowbrooksoftware.com/posts/testing-with-transactions/</guid><description>&lt;p>Most web applications eventually end up with tests that need to interact with a database.
Perhaps your business logic is tightly coupled to the database or maybe you are wanting to test a clearly-defined storage layer.
Either way, a common problem arises: how do you clean up the data used during testing? What should you do with all those scattered rows?&lt;/p>
&lt;p>Most of the time, developers will resort to a few common strategies:&lt;/p></description></item><item><title>Behavioral Abstractions in TypeScript</title><link>https://shallowbrooksoftware.com/posts/behavioral-abstractions-in-typescript/</link><pubDate>Sun, 03 Mar 2024 00:00:00 +0000</pubDate><guid>https://shallowbrooksoftware.com/posts/behavioral-abstractions-in-typescript/</guid><description>&lt;p>Almost every application needs to communicate with the outside world in one form or another.
It could be by scraping a web page, hitting a REST API, or simply talking to a database.
If an application depends on the specific details of any of these communications, however, then it becomes much more difficult to test.
Instead, a program&amp;rsquo;s domain logic should depend on &lt;em>abstract behaviors&lt;/em> instead of concrete implementations.
I think that this is one of the most important facets of system design.&lt;/p></description></item></channel></rss>