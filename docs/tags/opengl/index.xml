<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>OpenGL on Shallow Brook Software</title><link>https://shallowbrooksoftware.com/tags/opengl/</link><description>Recent content in OpenGL on Shallow Brook Software</description><generator>Hugo</generator><language>en</language><lastBuildDate>Wed, 17 Jun 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://shallowbrooksoftware.com/tags/opengl/index.xml" rel="self" type="application/rss+xml"/><item><title>Loading OpenGL Functions for Fun and Profit</title><link>https://shallowbrooksoftware.com/posts/loading-opengl-functions-for-fun-and-profit/</link><pubDate>Wed, 17 Jun 2020 00:00:00 +0000</pubDate><guid>https://shallowbrooksoftware.com/posts/loading-opengl-functions-for-fun-and-profit/</guid><description>&lt;p>While writing my &lt;a href="https://shallowbrooksoftware.com/posts/a-multi-platform-modern-opengl-demo-with-sdl2/" >previous blog post&lt;/a>, I realized that there is a general information gap around dynamically loading OpenGL functions.
When developers encounter this task on new OpenGL-related projects, they tend to reach for a premade loader such as &lt;a href="http://glew.sourceforge.net/" class="external-link" target="_blank" rel="noopener">glew&lt;/a>, &lt;a href="https://github.com/skaslev/gl3w" class="external-link" target="_blank" rel="noopener">gl3w&lt;/a>, &lt;a href="https://bitbucket.org/alfonse/glloadgen/wiki/Home" class="external-link" target="_blank" rel="noopener">glLoadGen&lt;/a>, or &lt;a href="https://github.com/Dav1dde/glad" class="external-link" target="_blank" rel="noopener">GLAD&lt;/a>.
A more detailed list along with an overview of what all these libraries do can be found &lt;a href="https://www.khronos.org/opengl/wiki/OpenGL_Loading_Library" class="external-link" target="_blank" rel="noopener">here&lt;/a>.&lt;/p>
&lt;p>&lt;strong>&amp;ldquo;An OpenGL Loading Library is a library that loads pointers to OpenGL functions at runtime, core as well as extensions. This is required to access functions from OpenGL versions above 1.1 on most platforms. Extension loading libraries also abstracts away the difference between the loading mechanisms on different platforms.&amp;rdquo;&lt;/strong> - &lt;a href="https://www.khronos.org/opengl/wiki/OpenGL_Loading_Library" class="external-link" target="_blank" rel="noopener">Khronos Docs&lt;/a>&lt;/p></description></item><item><title>A Multi-Platform Modern OpenGL Demo with SDL2</title><link>https://shallowbrooksoftware.com/posts/a-multi-platform-modern-opengl-demo-with-sdl2/</link><pubDate>Sun, 07 Jun 2020 00:00:00 +0000</pubDate><guid>https://shallowbrooksoftware.com/posts/a-multi-platform-modern-opengl-demo-with-sdl2/</guid><description>&lt;p>This post is largely inspired by &lt;a href="https://nullprogram.com/" class="external-link" target="_blank" rel="noopener">Chris Wellons&amp;rsquo;&lt;/a> 2015 blog post about writing a &lt;a href="https://nullprogram.com/blog/2015/06/06/" class="external-link" target="_blank" rel="noopener">modern OpenGL demo&lt;/a> that works on all three major desktop platforms (Windows, macOS, and Linux).
I have come back to his post countless times over the years when looking for guidance on how to build any cross-platform C program.&lt;/p>
&lt;p>In Chris&amp;rsquo; version of this demo he makes use of &lt;a href="https://www.glfw.org/" class="external-link" target="_blank" rel="noopener">GLFW3&lt;/a> for the window and input handling and uses &lt;a href="https://github.com/skaslev/gl3w" class="external-link" target="_blank" rel="noopener">gl3w&lt;/a> for loading &lt;a href="https://www.opengl.org/" class="external-link" target="_blank" rel="noopener">OpenGL&lt;/a> functions.
I have used GLFW3 in the past, but tend to prefer &lt;a href="https://www.libsdl.org/" class="external-link" target="_blank" rel="noopener">SDL2&lt;/a> for its &lt;a href="https://wiki.libsdl.org/Introduction" class="external-link" target="_blank" rel="noopener">wealth of features&lt;/a> and &lt;a href="https://wiki.libsdl.org/SDL_PollEvent" class="external-link" target="_blank" rel="noopener">polling-based event model&lt;/a>.
Therefore, in my version, I wanted to use SDL2 for the window and input handling and load the OpenGL functions myself.
Loading OpenGL functions is a fiddly, quirky topic that deserves its own &lt;a href="https://shallowbrooksoftware.com/posts/loading-opengl-fuctions-for-fun-and-profit/" >blog post&lt;/a>.
However, it doesn&amp;rsquo;t require too much code once the nuances are understood.&lt;/p></description></item></channel></rss>