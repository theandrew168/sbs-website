<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Go on Shallow Brook Software</title><link>https://shallowbrooksoftware.com/tags/go/</link><description>Recent content in Go on Shallow Brook Software</description><generator>Hugo</generator><language>en</language><lastBuildDate>Sun, 15 Sep 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://shallowbrooksoftware.com/tags/go/index.xml" rel="self" type="application/rss+xml"/><item><title>Simple Cookies in Go</title><link>https://shallowbrooksoftware.com/posts/simple-cookies-in-go/</link><pubDate>Sun, 15 Sep 2024 00:00:00 +0000</pubDate><guid>https://shallowbrooksoftware.com/posts/simple-cookies-in-go/</guid><description>&lt;p>Today&amp;rsquo;s blog post is about cookies!
Not the chocolate chip kind, but the web application state managemant kind.
In short, &lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Cookies" class="external-link" target="_blank" rel="noopener">cookies&lt;/a>! are bits of data (represented as name-value pairs) that web servers can request clients (mostly browsers) to store.
Since HTTP is a stateless protocol, it is useful to have a way to remember pieces of information between requests.
Often, cookies are used for identification and tracking purposes (like those obnoxious pop-ups you see on many sites).
For my projects, however, cookies are primarly used for session management and determining if a user is authenticated.&lt;/p></description></item><item><title>Simple Middleware in Go</title><link>https://shallowbrooksoftware.com/posts/simple-middleware-in-go/</link><pubDate>Sun, 08 Sep 2024 00:00:00 +0000</pubDate><guid>https://shallowbrooksoftware.com/posts/simple-middleware-in-go/</guid><description>&lt;p>Since Go released its &lt;a href="https://go.dev/blog/routing-enhancements" class="external-link" target="_blank" rel="noopener">HTTP routing enhancements&lt;/a> in version 1.22, I&amp;rsquo;ve been quick to migrate.
If you want to learn more about these changes, Eli Bendersky wrote up a &lt;a href="https://eli.thegreenplace.net/2023/better-http-server-routing-in-go-122" class="external-link" target="_blank" rel="noopener">great article&lt;/a> on the subject.
While Alex Edwards&amp;rsquo; &lt;a href="https://github.com/alexedwards/flow" class="external-link" target="_blank" rel="noopener">Flow&lt;/a> router has served me well (pun intended) for years, I tend to prefer using the standard library whenever possible.
However, one feature that Go&amp;rsquo;s &lt;a href="https://pkg.go.dev/net/http#ServeMux" class="external-link" target="_blank" rel="noopener">http.ServeMux&lt;/a> lacks is convenient support for middleware.&lt;/p>
&lt;h2 id="middleware">
 Middleware
 &lt;a class="heading-link" href="#middleware">
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading">&lt;/i>
 &lt;span class="sr-only">Link to heading&lt;/span>
 &lt;/a>
&lt;/h2>
&lt;p>&lt;strong>Middleware is code that runs between incoming (or outgoing) HTTP requests and your handlers.&lt;/strong>
It can be used for all sorts of things: handling panics, adding headers, compressing files, or verifying authenication.
Writing these chunks of logic as middleware allows for great flexibility and readability (as we&amp;rsquo;ll soon see).
As far as the code goes, middleware is typically written as a function that both accepts and returns Go&amp;rsquo;s most important HTTP interface: the &lt;a href="https://pkg.go.dev/net/http#Handler" class="external-link" target="_blank" rel="noopener">http.Handler&lt;/a>.&lt;/p></description></item><item><title>An Infinite io.Reader in Go</title><link>https://shallowbrooksoftware.com/posts/an-infinite-io-reader-in-go/</link><pubDate>Sun, 01 Sep 2024 00:00:00 +0000</pubDate><guid>https://shallowbrooksoftware.com/posts/an-infinite-io-reader-in-go/</guid><description>&lt;p>I recently wrote some middleware to ensure that incoming requests to a web server have an explicit size limit.
Until I determine this to be too small, I chose to limit request bodies to 4KB.
Go&amp;rsquo;s &lt;a href="https://pkg.go.dev/net/http" class="external-link" target="_blank" rel="noopener">net/http&lt;/a> package already includes a utility for this (called &lt;a href="https://pkg.go.dev/net/http#MaxBytesReader" class="external-link" target="_blank" rel="noopener">MaxBytesReader&lt;/a>) which makes writing the middleware quite simple.
Note that the way I write middleware is heavily inspired by Mat Ryer&amp;rsquo;s &lt;a href="https://medium.com/@matryer/writing-middleware-in-golang-and-how-go-makes-it-so-much-fun-4375c1246e81" class="external-link" target="_blank" rel="noopener">adapter pattern&lt;/a>.
Here&amp;rsquo;s the code:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// Represents a piece of HTTP middleware.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">Middleware&lt;/span> &lt;span style="color:#66d9ef">func&lt;/span>(&lt;span style="color:#a6e22e">http&lt;/span>.&lt;span style="color:#a6e22e">Handler&lt;/span>) &lt;span style="color:#a6e22e">http&lt;/span>.&lt;span style="color:#a6e22e">Handler&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// Limit the size of the request body to 4KB.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">MaxRequestBodySize&lt;/span> = &lt;span style="color:#ae81ff">4&lt;/span> &lt;span style="color:#f92672">*&lt;/span> &lt;span style="color:#ae81ff">1024&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// Places an upper limit on the size of every request body.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">LimitRequestBodySize&lt;/span>() &lt;span style="color:#a6e22e">Middleware&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">func&lt;/span>(&lt;span style="color:#a6e22e">next&lt;/span> &lt;span style="color:#a6e22e">http&lt;/span>.&lt;span style="color:#a6e22e">Handler&lt;/span>) &lt;span style="color:#a6e22e">http&lt;/span>.&lt;span style="color:#a6e22e">Handler&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">http&lt;/span>.&lt;span style="color:#a6e22e">HandlerFunc&lt;/span>(&lt;span style="color:#66d9ef">func&lt;/span>(&lt;span style="color:#a6e22e">w&lt;/span> &lt;span style="color:#a6e22e">http&lt;/span>.&lt;span style="color:#a6e22e">ResponseWriter&lt;/span>, &lt;span style="color:#a6e22e">r&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">http&lt;/span>.&lt;span style="color:#a6e22e">Request&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			&lt;span style="color:#a6e22e">r&lt;/span>.&lt;span style="color:#a6e22e">Body&lt;/span> = &lt;span style="color:#a6e22e">http&lt;/span>.&lt;span style="color:#a6e22e">MaxBytesReader&lt;/span>(&lt;span style="color:#a6e22e">w&lt;/span>, &lt;span style="color:#a6e22e">r&lt;/span>.&lt;span style="color:#a6e22e">Body&lt;/span>, &lt;span style="color:#a6e22e">MaxRequestBodySize&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			&lt;span style="color:#a6e22e">next&lt;/span>.&lt;span style="color:#a6e22e">ServeHTTP&lt;/span>(&lt;span style="color:#a6e22e">w&lt;/span>, &lt;span style="color:#a6e22e">r&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		})
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Pretty simple!
The next question was obvious: how do I test this?
I need to create an &lt;code>http.Request&lt;/code> with a body that is larger than 4KB.
I could probably do this by creating a &lt;a href="https://pkg.go.dev/bytes#Buffer" class="external-link" target="_blank" rel="noopener">bytes.Buffer&lt;/a> that is bigger than the limit.
That being said, perhaps there is a more creative way to solve this problem using Go&amp;rsquo;s &lt;a href="https://pkg.go.dev/io#Reader" class="external-link" target="_blank" rel="noopener">io.Reader&lt;/a> interface.&lt;/p></description></item><item><title>Brain Dump: BFFs and N+1 API Calls</title><link>https://shallowbrooksoftware.com/posts/brain-dump-bffs-and-api-calls/</link><pubDate>Sun, 18 Aug 2024 00:00:00 +0000</pubDate><guid>https://shallowbrooksoftware.com/posts/brain-dump-bffs-and-api-calls/</guid><description>&lt;p>Writing software is hard.
Sometimes, I&amp;rsquo;ll find myself stuck on a problem for days or even weeks.
When that happens, I find it useful to write out everything I know about the problem: the nuances, possible solutions, external references, etc.
My most recent head-scratcher has been about balancing &amp;ldquo;purist&amp;rdquo; REST API design with the needs of a web frontend.
I&amp;rsquo;m beginning to realize a truth: &lt;strong>they are different&lt;/strong>.
As always, I&amp;rsquo;m talking about &lt;a href="https://bloggulus.com" class="external-link" target="_blank" rel="noopener">Bloggulus&lt;/a>.&lt;/p></description></item><item><title>Is SvelteKit a Poor Choice for SPAs?</title><link>https://shallowbrooksoftware.com/posts/is-sveltekit-a-poor-choice-for-spas/</link><pubDate>Sun, 14 Jul 2024 00:00:00 +0000</pubDate><guid>https://shallowbrooksoftware.com/posts/is-sveltekit-a-poor-choice-for-spas/</guid><description>&lt;p>Recently, I&amp;rsquo;ve been working on the frontend for my &lt;a href="https://bloggulus.com/" class="external-link" target="_blank" rel="noopener">Bloggulus&lt;/a> project.
Back in the day, the frontend was implemented via server-rendered HTML pages.
This worked reasonably well, but I always felt like Go&amp;rsquo;s HTML templates were a bit painful to work with.
I also wanted to transition the application&amp;rsquo;s backend to a REST API so that I could use it as a foundation for learning how to build native apps (someday&amp;hellip;).&lt;/p></description></item><item><title>A Better Pattern for Go HTTP Handlers</title><link>https://shallowbrooksoftware.com/posts/a-better-pattern-for-go-http-handlers/</link><pubDate>Sun, 07 Jul 2024 00:00:00 +0000</pubDate><guid>https://shallowbrooksoftware.com/posts/a-better-pattern-for-go-http-handlers/</guid><description>&lt;p>In most web applications, handlers have dependencies.
These could be things like database connection pools, queue clients, or loggers.
For most of my Go-based web development projects, I&amp;rsquo;ve embraced the &amp;ldquo;application struct&amp;rdquo; pattern as described by Alex Edwards in his &amp;ldquo;Let&amp;rsquo;s Go&amp;rdquo; &lt;a href="https://lets-go.alexedwards.net/" class="external-link" target="_blank" rel="noopener">book series&lt;/a> (and a &lt;a href="https://www.alexedwards.net/blog/organising-database-access" class="external-link" target="_blank" rel="noopener">blog post&lt;/a>) to manage these dependencies.
Despite serving my quite well over the past few years, I recently found myself wanting something a bit more flexible.
This post describes the original pattern, its limitations, and how I iterated on it to arrive at something even better (in my opinion, of course).&lt;/p></description></item><item><title>Two Go + PostgreSQL Timestamp Gotchas</title><link>https://shallowbrooksoftware.com/posts/two-go-plus-postgresql-timestamp-gotchas/</link><pubDate>Sun, 30 Jun 2024 00:00:00 +0000</pubDate><guid>https://shallowbrooksoftware.com/posts/two-go-plus-postgresql-timestamp-gotchas/</guid><description>&lt;p>This week I added some additional tests to my &lt;a href="https://github.com/theandrew168/bloggulus" class="external-link" target="_blank" rel="noopener">Bloggulus&lt;/a> project.
In the process of doing so, I discovered a couple places where timestamp values weren&amp;rsquo;t matching what was expected.
For some background, I generate, process, and store all timestamps in the &lt;a href="https://en.wikipedia.org/wiki/Coordinated_Universal_Time" class="external-link" target="_blank" rel="noopener">UTC time standard&lt;/a>.&lt;/p>
&lt;p>The two gotchas were:&lt;/p>
&lt;ol>
&lt;li>Unexpected conversion of UTC timestamps to local time&lt;/li>
&lt;li>Mismatched precision between Go and PostgreSQL timestamps&lt;/li>
&lt;/ol>
&lt;h1 id="unexpected-conversion">
 Unexpected Conversion
 &lt;a class="heading-link" href="#unexpected-conversion">
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading">&lt;/i>
 &lt;span class="sr-only">Link to heading&lt;/span>
 &lt;/a>
&lt;/h1>
&lt;p>I store timestamps in the database using PostgreSQL&amp;rsquo;s &lt;code>timestamptz&lt;/code> &lt;a href="https://www.postgresql.org/docs/current/datatype-datetime.html" class="external-link" target="_blank" rel="noopener">data type&lt;/a>.
The problem I ran into was that even when I was inserting proper UTC timestamps (generated by Go&amp;rsquo;s &lt;a href="https://pkg.go.dev/time" class="external-link" target="_blank" rel="noopener">time&lt;/a> package), they were being returned from the database in my local time zone.
What&amp;rsquo;s going on?
Why are these UTC timestamps being converted to Central Standard Time when selected from the database?&lt;/p></description></item><item><title>Parsing Recursive Polymorphic JSON in Go</title><link>https://shallowbrooksoftware.com/posts/parsing-recursive-polymorphic-json-in-go/</link><pubDate>Sun, 19 May 2024 00:00:00 +0000</pubDate><guid>https://shallowbrooksoftware.com/posts/parsing-recursive-polymorphic-json-in-go/</guid><description>&lt;p>Recently, I was helping a friend design a system for matching text against a flexible system of rules.
For example, I might want to know if a piece text contains the word &amp;ldquo;foo&amp;rdquo; or the word &amp;ldquo;bar&amp;rdquo;.
A rule can either be a single regex pattern or a series of patterns combined with a logical operation (&lt;code>AND&lt;/code>, &lt;code>OR&lt;/code>, or &lt;code>NOT&lt;/code>).
We&amp;rsquo;ll call this first rule &lt;code>Basic&lt;/code> and the second one &lt;code>Composite&lt;/code>.
Since the composite rule can contain both basic and other composite rules, we need a third type to represent &amp;ldquo;can be either basic or composite&amp;rdquo;.
We&amp;rsquo;ll call this type &lt;code>Rule&lt;/code>.&lt;/p></description></item><item><title>Limiting Concurrency with Semaphores</title><link>https://shallowbrooksoftware.com/posts/limiting-concurrency-with-semaphores/</link><pubDate>Sun, 21 Apr 2024 00:00:00 +0000</pubDate><guid>https://shallowbrooksoftware.com/posts/limiting-concurrency-with-semaphores/</guid><description>&lt;p>I recently encountered some slowness while executing a bunch of tasks within a program.
Specifically, I was working on how &lt;a href="https://bloggulus.com/" class="external-link" target="_blank" rel="noopener">Bloggulus&lt;/a> syncs all of the blogs that it tracks (there are only 40 or so right now but I expect the number to grow).
Instead of naively syncing each blog serially, maybe concurrency can help.
Let&amp;rsquo;s find some ways to speed it up!&lt;/p>
&lt;h1 id="serial">
 Serial
 &lt;a class="heading-link" href="#serial">
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading">&lt;/i>
 &lt;span class="sr-only">Link to heading&lt;/span>
 &lt;/a>
&lt;/h1>
&lt;p>As a baseline, consider this simple program that executes multiple tasks in sequence.
Each job must be performed one after another until all have completed.
Instead of bogging you down the details of reading RSS feeds, I&amp;rsquo;ve simulated some work by sleeping for a quarter second before printing &amp;ldquo;job done!&amp;rdquo;:&lt;/p></description></item><item><title>Simple REST API Pagination</title><link>https://shallowbrooksoftware.com/posts/simple-rest-api-pagination/</link><pubDate>Sun, 14 Apr 2024 22:00:00 +0000</pubDate><guid>https://shallowbrooksoftware.com/posts/simple-rest-api-pagination/</guid><description>&lt;p>Recently, I&amp;rsquo;ve been working on revamping my &lt;a href="https://github.com/theandrew168/bloggulus" class="external-link" target="_blank" rel="noopener">Bloggulus&lt;/a> project to a split &lt;a href="https://developer.mozilla.org/en-US/docs/Glossary/REST" class="external-link" target="_blank" rel="noopener">REST API&lt;/a> + &lt;a href="https://developer.mozilla.org/en-US/docs/Glossary/SPA" class="external-link" target="_blank" rel="noopener">SPA&lt;/a> architecture (for fun and as an excuse to learn &lt;a href="https://kit.svelte.dev/" class="external-link" target="_blank" rel="noopener">SvelteKit&lt;/a>).
As a part of this effort, I took a moment to research and revisit how the API handles pagination.
Since the system holds hundreds of blogs and thousands of posts, returning &lt;em>all&lt;/em> items from a request would be slow and unwieldy.
Instead, the user (or web frontend) should be allowed to specify which set of items they want to view.
This is where pagination comes into play.&lt;/p></description></item><item><title>Instrumenting Go Web Apps</title><link>https://shallowbrooksoftware.com/posts/instrumenting-go-web-apps/</link><pubDate>Sun, 07 Apr 2024 23:00:00 +0000</pubDate><guid>https://shallowbrooksoftware.com/posts/instrumenting-go-web-apps/</guid><description>&lt;p>&lt;a href="https://prometheus.io/" class="external-link" target="_blank" rel="noopener">Prometheus&lt;/a> is an incredible open-source system for collecting, storing, and analyzing system metrics.
In addition to the server program, numerous &lt;a href="https://prometheus.io/docs/instrumenting/clientlibs/" class="external-link" target="_blank" rel="noopener">client libraries&lt;/a> have been written to simplify the process of exposing metrics in your own projects.
When writing Go-based web apps, I always include &lt;a href="https://github.com/prometheus/client_golang" class="external-link" target="_blank" rel="noopener">Go&amp;rsquo;s client library&lt;/a> so that information about the program can be collected, visualized, and monitored.
As outlined in the &lt;a href="https://prometheus.io/docs/guides/go-application/" class="external-link" target="_blank" rel="noopener">official guide&lt;/a>, it is very easy to get these basic metrics up and running:&lt;/p></description></item><item><title>Testing with Transactions</title><link>https://shallowbrooksoftware.com/posts/testing-with-transactions/</link><pubDate>Sun, 24 Mar 2024 00:00:00 +0000</pubDate><guid>https://shallowbrooksoftware.com/posts/testing-with-transactions/</guid><description>&lt;p>Most web applications eventually end up with tests that need to interact with a database.
Perhaps your business logic is tightly coupled to the database or maybe you are wanting to test a clearly-defined storage layer.
Either way, a common problem arises: how do you clean up the data used during testing? What should you do with all those scattered rows?&lt;/p>
&lt;p>Most of the time, developers will resort to a few common strategies:&lt;/p></description></item><item><title>Conditional Embedding in Go</title><link>https://shallowbrooksoftware.com/posts/conditional-embedding-in-go/</link><pubDate>Sun, 10 Mar 2024 00:00:00 +0000</pubDate><guid>https://shallowbrooksoftware.com/posts/conditional-embedding-in-go/</guid><description>&lt;p>I was recently working on &lt;a href="https://github.com/theandrew168/bloggulus" class="external-link" target="_blank" rel="noopener">a project&lt;/a> where the frontend is a &lt;a href="https://kit.svelte.dev/" class="external-link" target="_blank" rel="noopener">Svelte&lt;/a> SPA and the backend is a &lt;a href="https://go.dev/" class="external-link" target="_blank" rel="noopener">Go&lt;/a> REST API.
At a high level, this is how my project is structured:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>main&lt;span style="color:#f92672">.&lt;/span>go
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>backend&lt;span style="color:#f92672">/&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># source files for Go REST API&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>frontend&lt;span style="color:#f92672">/&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> package&lt;span style="color:#f92672">.&lt;/span>json
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> src&lt;span style="color:#f92672">/&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># source files for Svelte SPA&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Since Go is awesome, I&amp;rsquo;ve been using its &lt;a href="https://pkg.go.dev/embed" class="external-link" target="_blank" rel="noopener">embed&lt;/a> feature to bake all of the compiled frontend files into the single output binary.
This works great when building for production: compile the frontend, build the backend, done!
This snapshots the frontend and backend code into a single, static binary.
For iterative local development, however, I &lt;em>don&amp;rsquo;t&lt;/em> want this behavior.
I instead want the frontend changes to be reflected without needing to rebuild and restart the backend.
In short, I want to say:&lt;/p></description></item><item><title>My Current Opinions on Hosting Web Apps</title><link>https://shallowbrooksoftware.com/posts/my-current-opinions-on-hosting-web-apps/</link><pubDate>Sun, 18 Feb 2024 00:00:00 +0000</pubDate><guid>https://shallowbrooksoftware.com/posts/my-current-opinions-on-hosting-web-apps/</guid><description>&lt;p>A little while back, I was chatting with some tech friends about my experience using &lt;a href="https://fly.io/" class="external-link" target="_blank" rel="noopener">Fly&lt;/a> and &lt;a href="https://neon.tech/" class="external-link" target="_blank" rel="noopener">Neon&lt;/a> for hosting web apps that are under active development.
Between these two services and their low pricing for small projects, my total bill for the month was only $0.01 (Fly doesn&amp;rsquo;t even collect invoices below $5.00).
I shared how Fly and Neon seemed like a great fit for projects that are a work in progress but that I&amp;rsquo;m not sure if I&amp;rsquo;d use them for production services.
I&amp;rsquo;d have to do more pricing estimations and stability testing before having the trust and confidence needed to rely on these tools for anything that had users or was generating income.&lt;/p></description></item><item><title>Utilizing All Cores in a NodeJS Web Application</title><link>https://shallowbrooksoftware.com/posts/utilizing-all-cores-in-a-nodejs-web-application/</link><pubDate>Sun, 28 Jan 2024 00:00:00 +0000</pubDate><guid>https://shallowbrooksoftware.com/posts/utilizing-all-cores-in-a-nodejs-web-application/</guid><description>&lt;p>Coming from Go-based web development to NodeJS, one big thing surpised me: my web server only ever uses one core.
This is because NodeJS is a single-threaded runtime environment.
That being said, NodeJS is still highly concurrent: it uses &lt;a href="https://libuv.org/" class="external-link" target="_blank" rel="noopener">modern event loop technology&lt;/a> to implement non-blocking, IO-based concurrency.
NodeJS might not be truly parallel, but it is certainly concurrent.
Knowing this, how is it that NodeJS performs reasonably well in server-side environments?
Is it only ever using a fraction of its available multi-core CPU power?
In some ways, yes, but in practice this isn&amp;rsquo;t usually a bottleneck.&lt;/p></description></item><item><title>Implementing Make in Go</title><link>https://shallowbrooksoftware.com/posts/implementing-make-in-go/</link><pubDate>Sun, 14 Jan 2024 00:00:00 +0000</pubDate><guid>https://shallowbrooksoftware.com/posts/implementing-make-in-go/</guid><description>&lt;p>A while back, my buddy &lt;a href="https://brue.land/" class="external-link" target="_blank" rel="noopener">Wes&lt;/a> and I took a weekend trip to a remote cabin in eastern Iowa.
We try to do this once a year with plans of fishing, hiking, and simply enjoying the quietness of nature.
Not to mention the bliss of having no responsibilities for a few days!
Despite being an outdoorsy trip, I still brought my laptop because programming is my favorite hobby.
The internet in such remote locations is typically unreliable so I still consider it to be a nice disconnect.&lt;/p></description></item><item><title>Learning From geohot's minikeyvalue Project</title><link>https://shallowbrooksoftware.com/posts/learning-from-geohots-minikeyvalue-project/</link><pubDate>Thu, 14 Jan 2021 00:00:00 +0000</pubDate><guid>https://shallowbrooksoftware.com/posts/learning-from-geohots-minikeyvalue-project/</guid><description>&lt;p>I first became aware of &lt;a href="https://github.com/geohot/minikeyvalue" class="external-link" target="_blank" rel="noopener">minikeyvalue&lt;/a> while watching a &lt;a href="https://www.youtube.com/watch?v=cAFjZ1gXBxc" class="external-link" target="_blank" rel="noopener">recording&lt;/a> of George&amp;rsquo;s programming livestream.
This project was written in &lt;a href="https://www.python.org/" class="external-link" target="_blank" rel="noopener">Python&lt;/a> and the design was simple: an HTTP-based interface for storing, getting, and deleting arbitrary content.
Many folks call this type of thing a &amp;ldquo;distributed key-value store&amp;rdquo;.
The project was originally inspired by &lt;a href="https://github.com/chrislusf/seaweedfs" class="external-link" target="_blank" rel="noopener">SeaweedFS&lt;/a> but had the goal of being much, much simpler (ideally less than 1000 lines of code).&lt;/p>
&lt;p>The architecture of the program is straightforward: a single &amp;ldquo;index server&amp;rdquo; distributes and organizes data between any number of &amp;ldquo;volume servers&amp;rdquo;.
The actual data could be anything: text, images, &lt;a href="https://www.sqlite.org/index.html" class="external-link" target="_blank" rel="noopener">SQLite&lt;/a> databases.
It doesn&amp;rsquo;t matter!
Everything is just bytes at the end of the day.&lt;/p></description></item></channel></rss>