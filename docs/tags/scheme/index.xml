<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Scheme on Shallow Brook Software</title><link>https://shallowbrooksoftware.com/tags/scheme/</link><description>Recent content in Scheme on Shallow Brook Software</description><generator>Hugo</generator><language>en</language><lastBuildDate>Tue, 25 Aug 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://shallowbrooksoftware.com/tags/scheme/index.xml" rel="self" type="application/rss+xml"/><item><title>Wrapping Up Squeaky</title><link>https://shallowbrooksoftware.com/posts/wrapping-up-squeaky/</link><pubDate>Tue, 25 Aug 2020 00:00:00 +0000</pubDate><guid>https://shallowbrooksoftware.com/posts/wrapping-up-squeaky/</guid><description>&lt;p>My primary project for the last month or so has a been a proof of concept programming language called &lt;a href="https://github.com/theandrew168/squeaky" class="external-link" target="_blank" rel="noopener">Squeaky&lt;/a>.
I&amp;rsquo;ve had this idea in my head for a few years: build a functional language in C with a focus on game development.
I wanted window creation, OpenGL graphics, and input events to all be first class citizens of the language and not optional libraries to be pulled in later.
Cross-platform portability was important, too.
If you write a game that utilizes the language&amp;rsquo;s builtin capabilities for graphics and keyboard input, it should work the same on all major platforms: Windows, macOS, and Linux.&lt;/p></description></item></channel></rss>