<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>NodeJS on Shallow Brook Software</title><link>https://shallowbrooksoftware.com/tags/nodejs/</link><description>Recent content in NodeJS on Shallow Brook Software</description><generator>Hugo</generator><language>en</language><lastBuildDate>Sat, 24 May 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://shallowbrooksoftware.com/tags/nodejs/index.xml" rel="self" type="application/rss+xml"/><item><title>Pull Request of the Year 2024</title><link>https://shallowbrooksoftware.com/posts/pull-request-of-the-year-2024/</link><pubDate>Sat, 24 May 2025 00:00:00 +0000</pubDate><guid>https://shallowbrooksoftware.com/posts/pull-request-of-the-year-2024/</guid><description>&lt;p>I know, I know.
It&amp;rsquo;s already 2025 and I only came across &lt;a href="https://github.com/sveltejs/kit/pull/11653" class="external-link" target="_blank" rel="noopener">this PR&lt;/a> a few weeks ago.
That being said, it was merged in 2024 and I can&amp;rsquo;t recall seeing any other PRs from last year that had me stomping and hollering so hard.
Finding this feature (and the PR) came at a time of frustration: realizing that I wouldn&amp;rsquo;t be able to use &lt;a href="https://www.freedesktop.org/software/systemd/man/latest/systemd.socket.html" class="external-link" target="_blank" rel="noopener">systemd socket activation&lt;/a> for &lt;a href="https://nextjs.org/" class="external-link" target="_blank" rel="noopener">NextJS&lt;/a> (or &lt;a href="https://remix.run/" class="external-link" target="_blank" rel="noopener">RemixJS&lt;/a>, for that matter) without having to jump through hoops.&lt;/p></description></item><item><title>Utilizing All Cores in a NodeJS Web Application</title><link>https://shallowbrooksoftware.com/posts/utilizing-all-cores-in-a-nodejs-web-application/</link><pubDate>Sun, 28 Jan 2024 00:00:00 +0000</pubDate><guid>https://shallowbrooksoftware.com/posts/utilizing-all-cores-in-a-nodejs-web-application/</guid><description>&lt;p>Coming from Go-based web development to NodeJS, one big thing surpised me: my web server only ever uses one core.
This is because NodeJS is a single-threaded runtime environment.
That being said, NodeJS is still highly concurrent: it uses &lt;a href="https://libuv.org/" class="external-link" target="_blank" rel="noopener">modern event loop technology&lt;/a> to implement non-blocking, IO-based concurrency.
NodeJS might not be truly parallel, but it is certainly concurrent.
Knowing this, how is it that NodeJS performs reasonably well in server-side environments?
Is it only ever using a fraction of its available multi-core CPU power?
In some ways, yes, but in practice this isn&amp;rsquo;t usually a bottleneck.&lt;/p></description></item></channel></rss>