<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Shallow Brook Software</title><link>https://shallowbrooksoftware.com/</link><description>Recent content on Shallow Brook Software</description><generator>Hugo</generator><language>en</language><lastBuildDate>Sun, 03 Nov 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://shallowbrooksoftware.com/index.xml" rel="self" type="application/rss+xml"/><item><title>Migrating Numeric IDs to UUIDs</title><link>https://shallowbrooksoftware.com/posts/migrating-numeric-ids-to-uuids/</link><pubDate>Sun, 03 Nov 2024 00:00:00 +0000</pubDate><guid>https://shallowbrooksoftware.com/posts/migrating-numeric-ids-to-uuids/</guid><description>&lt;p>There are a few ways to represent primary keys within a database.
The most common way (in my experience) to use auto-incrementing integers.
This means that first row&amp;rsquo;s key will be 1, the second&amp;rsquo;s will be 2, and so on.
When it comes to my preferred style of software development, however, this approach has a major downside: new domain objects must first consult the database to determine their ID.&lt;/p>
&lt;p>While I&amp;rsquo;m far from a &lt;a href="https://en.wikipedia.org/wiki/Domain-driven_design" class="external-link" target="_blank" rel="noopener">domain-driven design&lt;/a> (DDD) purist, I like the idea of being able to represent the core domain objects and business logic of an application in complete isolation from the outside world.
Having domain objects depend on the database for IDs makes this impossible (or at least very difficult).
If only there existed a different kind of unique ID that could be generated by the domain objects themselves without requiring any coordination with an external system&amp;hellip;&lt;/p></description></item><item><title>OAuth Auth Only</title><link>https://shallowbrooksoftware.com/posts/oauth-auth-only/</link><pubDate>Sun, 27 Oct 2024 00:00:00 +0000</pubDate><guid>https://shallowbrooksoftware.com/posts/oauth-auth-only/</guid><description>&lt;p>I recently made a decision around how Bloggulus handles authentication.
In short, it now only supports signing in with OAuth (via GitHub or Google).
Users can no longer sign up with an arbitrary username and password.
Is this a terrible idea or big brain play?
I think the jury is still out but, personally, I&amp;rsquo;m feeling pretty good about it!
This approach, like everything in software development, comes with tradeoffs.&lt;/p></description></item><item><title>Bull in a Learning Shop</title><link>https://shallowbrooksoftware.com/posts/bull-in-a-learning-shop/</link><pubDate>Sun, 20 Oct 2024 00:00:00 +0000</pubDate><guid>https://shallowbrooksoftware.com/posts/bull-in-a-learning-shop/</guid><description>&lt;p>While out on a long walk the other day, I was thinking about World of Warcraft and &amp;ldquo;Mythic+&amp;rdquo; dungeons.
Specifically, I was trying to figure out how best to prepare: should I read more about how to optimize my Resto Druid, watch more videos about dungeon routes, maybe something else?
Given that this season contains eight unique dungeons, all that research is going to take a while.
Eventually I thought: maybe I just need to queue up, dive in, and figure it out like a &amp;ldquo;bull in a learning shop&amp;rdquo;.
I laughed out loud when that phrase came to me.
Despite sounding so silly, it represents a very real and applicable concept.&lt;/p></description></item><item><title>CSS Abstraction vs Duplication</title><link>https://shallowbrooksoftware.com/posts/css-abstraction-vs-duplication/</link><pubDate>Sun, 13 Oct 2024 00:00:00 +0000</pubDate><guid>https://shallowbrooksoftware.com/posts/css-abstraction-vs-duplication/</guid><description>&lt;p>CSS allows you get all the benefits of abstraction but without the commitment.
By applying the same style to multiple classes (via comma-separated &lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/Selector_list" class="external-link" target="_blank" rel="noopener">selector lists&lt;/a>), you can get the best of both worlds: the convenience of abstraction with the flexibility of duplication.
You don&amp;rsquo;t actually have to repeat the CSS &lt;em>and&lt;/em> you don&amp;rsquo;t have to commit to multiple designs always being identical.
If and when one design changes, you only need to split the selectors (a simple copy and paste) and update the modified one.&lt;/p></description></item><item><title>Bloggulus Supports Personalization!</title><link>https://shallowbrooksoftware.com/posts/bloggulus-supports-personalization/</link><pubDate>Sun, 06 Oct 2024 00:00:00 +0000</pubDate><guid>https://shallowbrooksoftware.com/posts/bloggulus-supports-personalization/</guid><description>&lt;p>&lt;a href="https://bloggulus.com/" class="external-link" target="_blank" rel="noopener">Bloggulus&lt;/a> is my primary &amp;ldquo;for fun&amp;rdquo; passion project.
Any frequent readers of my blog (are you out there?) will surely have heard of it before.
In short, it is a &lt;a href="https://github.com/theandrew168/bloggulus" class="external-link" target="_blank" rel="noopener">custom-built&lt;/a> RSS feed aggregator combined with a context index powered by PostgreSQL&amp;rsquo;s &lt;a href="https://www.postgresql.org/docs/current/textsearch.html" class="external-link" target="_blank" rel="noopener">full text search&lt;/a> feature.
I use it as a playground for exploring development strategies, software architecture, and even programming languages.&lt;/p>
&lt;p>What originally started out as a simple server-side rendered Go application has since taken on many forms.
For a while it was a full-stack &lt;a href="https://kit.svelte.dev/" class="external-link" target="_blank" rel="noopener">SvelteKit&lt;/a> app, then a REST API backend with a &lt;a href="https://svelte.dev/" class="external-link" target="_blank" rel="noopener">Svelte&lt;/a> frontend, then with a &lt;a href="https://react.dev/" class="external-link" target="_blank" rel="noopener">React&lt;/a> frontend, and eventually back to server-side rendered Go.
It has really come full circle!
I wouldn&amp;rsquo;t trade the experience and learning for anything, though.
I feel much more well-rounded as a programmer having built the same application in so many different ways.&lt;/p></description></item><item><title>2025: The Year of Clojure?</title><link>https://shallowbrooksoftware.com/posts/2025-the-year-of-clojure/</link><pubDate>Sun, 29 Sep 2024 00:00:00 +0000</pubDate><guid>https://shallowbrooksoftware.com/posts/2025-the-year-of-clojure/</guid><description>&lt;p>I’ve been thinking about &lt;a href="https://clojure.org/" class="external-link" target="_blank" rel="noopener">Clojure&lt;/a> a lot lately.
Something about this “immutable, data-driven lisp on the JVM” has always fascinated me… but has never “clicked”.
I love its core ideas: immutable data, simple syntax, emphasis on pure functions, great interop with Java, etc.
In fact, my &lt;a href="https://shallowbrooksoftware.com/posts/a-better-pattern-for-go-http-handlers/" >modern patterns&lt;/a> for writing web apps in Go are slowly converging on a more functional design (using higher-order function to close around dependencies).
I’d like to write more Clojure in 2025 and see if I can finally connect deeply with its philosophy.&lt;/p></description></item><item><title>Bloggulus: Seems Fine</title><link>https://shallowbrooksoftware.com/posts/bloggulus-seems-fine/</link><pubDate>Sun, 22 Sep 2024 00:00:00 +0000</pubDate><guid>https://shallowbrooksoftware.com/posts/bloggulus-seems-fine/</guid><description>&lt;p>A few weeks ago, &lt;a href="https://rachelbythebay.com" class="external-link" target="_blank" rel="noopener">Rachel by the Bay&lt;/a> made another &lt;a href="https://rachelbythebay.com/w/2024/09/13/fs/" class="external-link" target="_blank" rel="noopener">update post&lt;/a> regarding the RSS correctness system that she&amp;rsquo;s been running.
In these posts, she&amp;rsquo;ll enumerate various feed readers and call out their behavior: for better or for worse.
For the first time, &lt;a href="https://bloggulus.com/" class="external-link" target="_blank" rel="noopener">Bloggulus&lt;/a> made it onto the list without any noticeable issues!&lt;/p>
&lt;p>&lt;img src="https://shallowbrooksoftware.com/images/20240922/seems-fine.webp" alt="Bloggulus mentioned on Rachel by the Bay">&lt;/p>
&lt;p>To many, &amp;ldquo;seems fine&amp;rdquo; might feel like an underwhelming statement.
But to me, it means everything.
It feels good to know that Bloggulus properly respects caching headers, provides a distinct user agent, and polls at an acceptable rate.
I&amp;rsquo;ve put a &lt;a href="https://shallowbrooksoftware.com/posts/bloggulus-a-responsible-rss-reader/" >decent&lt;/a> &lt;a href="https://shallowbrooksoftware.com/posts/more-bloggulus-rss-improvements/" >amount&lt;/a> of effort into ensuring that Bloggulus follows the rules and is a respectful actor in the context of the greater internet.&lt;/p></description></item><item><title>Simple Cookies in Go</title><link>https://shallowbrooksoftware.com/posts/simple-cookies-in-go/</link><pubDate>Sun, 15 Sep 2024 00:00:00 +0000</pubDate><guid>https://shallowbrooksoftware.com/posts/simple-cookies-in-go/</guid><description>&lt;p>Today&amp;rsquo;s blog post is about cookies!
Not the chocolate chip kind, but the web application state managemant kind.
In short, &lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Cookies" class="external-link" target="_blank" rel="noopener">cookies&lt;/a>! are bits of data (represented as name-value pairs) that web servers can request clients (mostly browsers) to store.
Since HTTP is a stateless protocol, it is useful to have a way to remember pieces of information between requests.
Often, cookies are used for identification and tracking purposes (like those obnoxious pop-ups you see on many sites).
For my projects, however, cookies are primarly used for session management and determining if a user is authenticated.&lt;/p></description></item><item><title>Simple Middleware in Go</title><link>https://shallowbrooksoftware.com/posts/simple-middleware-in-go/</link><pubDate>Sun, 08 Sep 2024 00:00:00 +0000</pubDate><guid>https://shallowbrooksoftware.com/posts/simple-middleware-in-go/</guid><description>&lt;p>Since Go released its &lt;a href="https://go.dev/blog/routing-enhancements" class="external-link" target="_blank" rel="noopener">HTTP routing enhancements&lt;/a> in version 1.22, I&amp;rsquo;ve been quick to migrate.
If you want to learn more about these changes, Eli Bendersky wrote up a &lt;a href="https://eli.thegreenplace.net/2023/better-http-server-routing-in-go-122" class="external-link" target="_blank" rel="noopener">great article&lt;/a> on the subject.
While Alex Edwards&amp;rsquo; &lt;a href="https://github.com/alexedwards/flow" class="external-link" target="_blank" rel="noopener">Flow&lt;/a> router has served me well (pun intended) for years, I tend to prefer using the standard library whenever possible.
However, one feature that Go&amp;rsquo;s &lt;a href="https://pkg.go.dev/net/http#ServeMux" class="external-link" target="_blank" rel="noopener">http.ServeMux&lt;/a> lacks is convenient support for middleware.&lt;/p>
&lt;h2 id="middleware">
 Middleware
 &lt;a class="heading-link" href="#middleware">
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading">&lt;/i>
 &lt;span class="sr-only">Link to heading&lt;/span>
 &lt;/a>
&lt;/h2>
&lt;p>&lt;strong>Middleware is code that runs between incoming (or outgoing) HTTP requests and your handlers.&lt;/strong>
It can be used for all sorts of things: handling panics, adding headers, compressing files, or verifying authenication.
Writing these chunks of logic as middleware allows for great flexibility and readability (as we&amp;rsquo;ll soon see).
As far as the code goes, middleware is typically written as a function that both accepts and returns Go&amp;rsquo;s most important HTTP interface: the &lt;a href="https://pkg.go.dev/net/http#Handler" class="external-link" target="_blank" rel="noopener">http.Handler&lt;/a>.&lt;/p></description></item><item><title>An Infinite io.Reader in Go</title><link>https://shallowbrooksoftware.com/posts/an-infinite-io-reader-in-go/</link><pubDate>Sun, 01 Sep 2024 00:00:00 +0000</pubDate><guid>https://shallowbrooksoftware.com/posts/an-infinite-io-reader-in-go/</guid><description>&lt;p>I recently wrote some middleware to ensure that incoming requests to a web server have an explicit size limit.
Until I determine this to be too small, I chose to limit request bodies to 4KB.
Go&amp;rsquo;s &lt;a href="https://pkg.go.dev/net/http" class="external-link" target="_blank" rel="noopener">net/http&lt;/a> package already includes a utility for this (called &lt;a href="https://pkg.go.dev/net/http#MaxBytesReader" class="external-link" target="_blank" rel="noopener">MaxBytesReader&lt;/a>) which makes writing the middleware quite simple.
Note that the way I write middleware is heavily inspired by Mat Ryer&amp;rsquo;s &lt;a href="https://medium.com/@matryer/writing-middleware-in-golang-and-how-go-makes-it-so-much-fun-4375c1246e81" class="external-link" target="_blank" rel="noopener">adapter pattern&lt;/a>.
Here&amp;rsquo;s the code:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// Represents a piece of HTTP middleware.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">Middleware&lt;/span> &lt;span style="color:#66d9ef">func&lt;/span>(&lt;span style="color:#a6e22e">http&lt;/span>.&lt;span style="color:#a6e22e">Handler&lt;/span>) &lt;span style="color:#a6e22e">http&lt;/span>.&lt;span style="color:#a6e22e">Handler&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// Limit the size of the request body to 4KB.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">MaxRequestBodySize&lt;/span> = &lt;span style="color:#ae81ff">4&lt;/span> &lt;span style="color:#f92672">*&lt;/span> &lt;span style="color:#ae81ff">1024&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// Places an upper limit on the size of every request body.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">LimitRequestBodySize&lt;/span>() &lt;span style="color:#a6e22e">Middleware&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">func&lt;/span>(&lt;span style="color:#a6e22e">next&lt;/span> &lt;span style="color:#a6e22e">http&lt;/span>.&lt;span style="color:#a6e22e">Handler&lt;/span>) &lt;span style="color:#a6e22e">http&lt;/span>.&lt;span style="color:#a6e22e">Handler&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">http&lt;/span>.&lt;span style="color:#a6e22e">HandlerFunc&lt;/span>(&lt;span style="color:#66d9ef">func&lt;/span>(&lt;span style="color:#a6e22e">w&lt;/span> &lt;span style="color:#a6e22e">http&lt;/span>.&lt;span style="color:#a6e22e">ResponseWriter&lt;/span>, &lt;span style="color:#a6e22e">r&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">http&lt;/span>.&lt;span style="color:#a6e22e">Request&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			&lt;span style="color:#a6e22e">r&lt;/span>.&lt;span style="color:#a6e22e">Body&lt;/span> = &lt;span style="color:#a6e22e">http&lt;/span>.&lt;span style="color:#a6e22e">MaxBytesReader&lt;/span>(&lt;span style="color:#a6e22e">w&lt;/span>, &lt;span style="color:#a6e22e">r&lt;/span>.&lt;span style="color:#a6e22e">Body&lt;/span>, &lt;span style="color:#a6e22e">MaxRequestBodySize&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			&lt;span style="color:#a6e22e">next&lt;/span>.&lt;span style="color:#a6e22e">ServeHTTP&lt;/span>(&lt;span style="color:#a6e22e">w&lt;/span>, &lt;span style="color:#a6e22e">r&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		})
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Pretty simple!
The next question was obvious: how do I test this?
I need to create an &lt;code>http.Request&lt;/code> with a body that is larger than 4KB.
I could probably do this by creating a &lt;a href="https://pkg.go.dev/bytes#Buffer" class="external-link" target="_blank" rel="noopener">bytes.Buffer&lt;/a> that is bigger than the limit.
That being said, perhaps there is a more creative way to solve this problem using Go&amp;rsquo;s &lt;a href="https://pkg.go.dev/io#Reader" class="external-link" target="_blank" rel="noopener">io.Reader&lt;/a> interface.&lt;/p></description></item><item><title>Has Science Gone Too Far?</title><link>https://shallowbrooksoftware.com/posts/has-science-gone-too-far/</link><pubDate>Sun, 25 Aug 2024 00:00:00 +0000</pubDate><guid>https://shallowbrooksoftware.com/posts/has-science-gone-too-far/</guid><description>&lt;p>I recently &lt;a href="https://shallowbrooksoftware.com/posts/brain-dump-bffs-and-api-calls/" >wrote an article&lt;/a> explaining my difficulty with trying to reconcile “traditional API design” with BFFs (backend for frontend) and N+1 API calls.
It seemed tough to arrive at a &amp;ldquo;best&amp;rdquo; solution (and maybe one doesn&amp;rsquo;t even really exist).
Do I build my API for general consumption (granular and resource-based) or specifically for my web frontend (coarse with multiple resources joined together)?
I settled for a middleground: use intentional frontend techniques to load secondary data &lt;em>after&lt;/em> rendering the initial, primary data.
Then, if that was too cumbersome, create a BFF endpoint to power heavier pages.&lt;/p></description></item><item><title>Brain Dump: BFFs and N+1 API Calls</title><link>https://shallowbrooksoftware.com/posts/brain-dump-bffs-and-api-calls/</link><pubDate>Sun, 18 Aug 2024 00:00:00 +0000</pubDate><guid>https://shallowbrooksoftware.com/posts/brain-dump-bffs-and-api-calls/</guid><description>&lt;p>Writing software is hard.
Sometimes, I&amp;rsquo;ll find myself stuck on a problem for days or even weeks.
When that happens, I find it useful to write out everything I know about the problem: the nuances, possible solutions, external references, etc.
My most recent head-scratcher has been about balancing &amp;ldquo;purist&amp;rdquo; REST API design with the needs of a web frontend.
I&amp;rsquo;m beginning to realize a truth: &lt;strong>they are different&lt;/strong>.
As always, I&amp;rsquo;m talking about &lt;a href="https://bloggulus.com" class="external-link" target="_blank" rel="noopener">Bloggulus&lt;/a>.&lt;/p></description></item><item><title>More Bloggulus RSS Improvements</title><link>https://shallowbrooksoftware.com/posts/more-bloggulus-rss-improvements/</link><pubDate>Sun, 11 Aug 2024 00:00:00 +0000</pubDate><guid>https://shallowbrooksoftware.com/posts/more-bloggulus-rss-improvements/</guid><description>&lt;p>Thanks to &lt;a href="https://rachelbythebay.com/w/" class="external-link" target="_blank" rel="noopener">Rachel by the Bay&lt;/a> and her posts about RSS correctness / etiquette, I’ve been able to more deeply understand the relationship between feeds and readers.
A few months ago, I decided to use &lt;a href="https://bloggulus.com" class="external-link" target="_blank" rel="noopener">Bloggulus&lt;/a> to participate in her feed reader scoring program.
I &lt;a href="https://shallowbrooksoftware.com/posts/bloggulus-a-responsible-rss-reader/" >wrote about it&lt;/a> at the time and noted how Bloggulus&amp;rsquo; performance as a responsible RSS reader was &amp;ldquo;good but not great&amp;rdquo;.&lt;/p>
&lt;p>Recently, while on vacation, I decided to fix the remaining three issues with Bloggulus:&lt;/p></description></item><item><title>Programming on Vacation</title><link>https://shallowbrooksoftware.com/posts/programming-on-vacation/</link><pubDate>Sun, 04 Aug 2024 00:00:00 +0000</pubDate><guid>https://shallowbrooksoftware.com/posts/programming-on-vacation/</guid><description>&lt;p>I&amp;rsquo;m going to be on vacation this week!
My wife and I (and some friends) are headed down to the Lake of the Ozarks to swim, boat around, and chill.
That being said, I genuinely enjoy programming and vacations give me time to &amp;ldquo;switch gears&amp;rdquo; and adapt a different development schedule.
See, while we are here, people are always around: chatting and having a good time.
We also tend to change plans on the fly which makes committing to long blocks of uninterruped time difficult.
I love these aspects of vacation but they make deep work somewhat difficult.&lt;/p></description></item><item><title>Errors as Lists, Not Maps</title><link>https://shallowbrooksoftware.com/posts/errors-as-lists-not-maps/</link><pubDate>Sun, 28 Jul 2024 00:00:00 +0000</pubDate><guid>https://shallowbrooksoftware.com/posts/errors-as-lists-not-maps/</guid><description>&lt;p>All REST APIs must decide how to handle and represent errors.
There are many ways to accomplish this task and they all come with varying pros and cons.
This post starts by describing the strategy I&amp;rsquo;ve historically used when dealing with errors.
After examining some limitations with that pattern, I present an alternative.&lt;/p>
&lt;h1 id="errors-as-maps">
 Errors as Maps
 &lt;a class="heading-link" href="#errors-as-maps">
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading">&lt;/i>
 &lt;span class="sr-only">Link to heading&lt;/span>
 &lt;/a>
&lt;/h1>
&lt;p>Errors come in many shapes and sizes.
Since errors often arise in response to input validation, it can be useful to include what specific &amp;ldquo;field&amp;rdquo; caused the problem.
Until recently, I&amp;rsquo;ve represented these errors as a map: the key is the problematic field and the value is the error message for that field.
This enables the frontend to display the errors right next to the invalid input which is great for user experience.&lt;/p></description></item><item><title>Simple Server Swap Space</title><link>https://shallowbrooksoftware.com/posts/simple-server-swap-space/</link><pubDate>Sun, 21 Jul 2024 00:00:00 +0000</pubDate><guid>https://shallowbrooksoftware.com/posts/simple-server-swap-space/</guid><description>&lt;p>Since the recent &lt;a href="https://shallowbrooksoftware.com/posts/bloggulus-outage-postmortem/" >Bloggulus outage&lt;/a>, I&amp;rsquo;ve been keeping a close eye on things.
While the server has mostly been stable, I still noticed the occasional OOM kill after creating backups via &lt;a href="https://github.com/theandrew168/pg2s3" class="external-link" target="_blank" rel="noopener">pg2s3&lt;/a>.
Here is an example from &lt;code>journalctl -u pg2s3&lt;/code> logs (notice that this was happening nearly a month after the most-outage memory increase):&lt;/p>
&lt;pre tabindex="0">&lt;code>Jul 01 09:00:03 bloggulus pg2s3[32400]: created bloggulus_2024-07-01T09:00:00Z.backup.age
Jul 01 09:00:04 bloggulus pg2s3[32400]: deleted bloggulus_2024-05-04T09:00:00Z.backup.age
Jul 02 09:00:05 bloggulus systemd[1]: pg2s3.service: A process of this unit has been killed by the OOM killer.
Jul 02 09:00:05 bloggulus systemd[1]: pg2s3.service: Main process exited, code=killed, status=9/KILL
Jul 02 09:00:05 bloggulus systemd[1]: pg2s3.service: Failed with result &amp;#39;oom-kill&amp;#39;.
Jul 02 09:00:05 bloggulus systemd[1]: pg2s3.service: Consumed 9.452s CPU time.
&lt;/code>&lt;/pre>&lt;p>Okay, so it seems like the 1GB of RAM isn&amp;rsquo;t quite enough when backups are taking place.
The server works just fine under normal operation, however, but backups push it over the edge.
If only there was a way to &amp;ldquo;download more RAM&amp;rdquo; and give the server a bit more breathing room&amp;hellip;&lt;/p></description></item><item><title>Is SvelteKit a Poor Choice for SPAs?</title><link>https://shallowbrooksoftware.com/posts/is-sveltekit-a-poor-choice-for-spas/</link><pubDate>Sun, 14 Jul 2024 00:00:00 +0000</pubDate><guid>https://shallowbrooksoftware.com/posts/is-sveltekit-a-poor-choice-for-spas/</guid><description>&lt;p>Recently, I&amp;rsquo;ve been working on the frontend for my &lt;a href="https://bloggulus.com/" class="external-link" target="_blank" rel="noopener">Bloggulus&lt;/a> project.
Back in the day, the frontend was implemented via server-rendered HTML pages.
This worked reasonably well, but I always felt like Go&amp;rsquo;s HTML templates were a bit painful to work with.
I also wanted to transition the application&amp;rsquo;s backend to a REST API so that I could use it as a foundation for learning how to build native apps (someday&amp;hellip;).&lt;/p></description></item><item><title>A Better Pattern for Go HTTP Handlers</title><link>https://shallowbrooksoftware.com/posts/a-better-pattern-for-go-http-handlers/</link><pubDate>Sun, 07 Jul 2024 00:00:00 +0000</pubDate><guid>https://shallowbrooksoftware.com/posts/a-better-pattern-for-go-http-handlers/</guid><description>&lt;p>In most web applications, handlers have dependencies.
These could be things like database connection pools, queue clients, or loggers.
For most of my Go-based web development projects, I&amp;rsquo;ve embraced the &amp;ldquo;application struct&amp;rdquo; pattern as described by Alex Edwards in his &amp;ldquo;Let&amp;rsquo;s Go&amp;rdquo; &lt;a href="https://lets-go.alexedwards.net/" class="external-link" target="_blank" rel="noopener">book series&lt;/a> (and a &lt;a href="https://www.alexedwards.net/blog/organising-database-access" class="external-link" target="_blank" rel="noopener">blog post&lt;/a>) to manage these dependencies.
Despite serving my quite well over the past few years, I recently found myself wanting something a bit more flexible.
This post describes the original pattern, its limitations, and how I iterated on it to arrive at something even better (in my opinion, of course).&lt;/p></description></item><item><title>Two Go + PostgreSQL Timestamp Gotchas</title><link>https://shallowbrooksoftware.com/posts/two-go-plus-postgresql-timestamp-gotchas/</link><pubDate>Sun, 30 Jun 2024 00:00:00 +0000</pubDate><guid>https://shallowbrooksoftware.com/posts/two-go-plus-postgresql-timestamp-gotchas/</guid><description>&lt;p>This week I added some additional tests to my &lt;a href="https://github.com/theandrew168/bloggulus" class="external-link" target="_blank" rel="noopener">Bloggulus&lt;/a> project.
In the process of doing so, I discovered a couple places where timestamp values weren&amp;rsquo;t matching what was expected.
For some background, I generate, process, and store all timestamps in the &lt;a href="https://en.wikipedia.org/wiki/Coordinated_Universal_Time" class="external-link" target="_blank" rel="noopener">UTC time standard&lt;/a>.&lt;/p>
&lt;p>The two gotchas were:&lt;/p>
&lt;ol>
&lt;li>Unexpected conversion of UTC timestamps to local time&lt;/li>
&lt;li>Mismatched precision between Go and PostgreSQL timestamps&lt;/li>
&lt;/ol>
&lt;h1 id="unexpected-conversion">
 Unexpected Conversion
 &lt;a class="heading-link" href="#unexpected-conversion">
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading">&lt;/i>
 &lt;span class="sr-only">Link to heading&lt;/span>
 &lt;/a>
&lt;/h1>
&lt;p>I store timestamps in the database using PostgreSQL&amp;rsquo;s &lt;code>timestamptz&lt;/code> &lt;a href="https://www.postgresql.org/docs/current/datatype-datetime.html" class="external-link" target="_blank" rel="noopener">data type&lt;/a>.
The problem I ran into was that even when I was inserting proper UTC timestamps (generated by Go&amp;rsquo;s &lt;a href="https://pkg.go.dev/time" class="external-link" target="_blank" rel="noopener">time&lt;/a> package), they were being returned from the database in my local time zone.
What&amp;rsquo;s going on?
Why are these UTC timestamps being converted to Central Standard Time when selected from the database?&lt;/p></description></item><item><title>Digimon Cards and Database Indexes</title><link>https://shallowbrooksoftware.com/posts/digimon-cards-and-database-indexes/</link><pubDate>Sun, 23 Jun 2024 00:00:00 +0000</pubDate><guid>https://shallowbrooksoftware.com/posts/digimon-cards-and-database-indexes/</guid><description>&lt;p>I&amp;rsquo;m a big fan of the &lt;a href="https://world.digimoncard.com/" class="external-link" target="_blank" rel="noopener">Digimon Card Game&lt;/a> (the one released in 2020).
The games are quick, the mechanics are engaging, and the community is friendly.
Plus, I was a big fan of the Digimon anime as a kid so I have a lot of nostalgia for the characters.
When I first got into the game, I realized that only a few sets had been released so far.
I set my eyes on building and maintaining a complete collection: four copies of each card.
With enough spreadsheets and time, this would allow me build any deck that I wanted.
This was honestly a breath of fresh air coming from &lt;a href="https://magic.wizards.com/en" class="external-link" target="_blank" rel="noopener">Magic: The Gathering&lt;/a>.&lt;/p></description></item><item><title>Reinforcing Indirect Joins</title><link>https://shallowbrooksoftware.com/posts/reinforcing-indirect-joins/</link><pubDate>Sun, 16 Jun 2024 00:00:00 +0000</pubDate><guid>https://shallowbrooksoftware.com/posts/reinforcing-indirect-joins/</guid><description>&lt;p>Recently, I ran into an issue where a very large PostgreSQL query (involving roughly 30 tables) was taking much longer to plan than to execute.
At its worst, it was taking multiple &lt;em>seconds&lt;/em> to plan and a few hundred milliseconds to execute.
My problem wasn&amp;rsquo;t really about standard query optimization: I was already past that.
This was a problem of query complexity and trying to get the PostgreSQL &lt;a href="https://www.postgresql.org/docs/current/planner-optimizer.html" class="external-link" target="_blank" rel="noopener">planner/optimizer&lt;/a> to more quickly arrive at an ideal query.&lt;/p></description></item><item><title>Bloggulus Outage Postmortem</title><link>https://shallowbrooksoftware.com/posts/bloggulus-outage-postmortem/</link><pubDate>Sun, 09 Jun 2024 00:00:00 +0000</pubDate><guid>https://shallowbrooksoftware.com/posts/bloggulus-outage-postmortem/</guid><description>&lt;p>On June 4, 2024, &lt;a href="https://bloggulus.com" class="external-link" target="_blank" rel="noopener">Bloggulus&lt;/a> was down for just under 7 hours.
Despite being offline for so long, the immediate fix only took only ~30 minutes to find and apply once I became aware of the issue.
This post details how I went about fixing the problem and then digs deeper into what actually happened.
I also discuss a few gaps in server monitoring and notification delivery.&lt;/p>
&lt;p>&lt;img src="https://shallowbrooksoftware.com/images/20240609/downtime.webp" alt="Downtime of roughly seven hours">&lt;/p></description></item><item><title>Bloggulus: A Responsible RSS Reader</title><link>https://shallowbrooksoftware.com/posts/bloggulus-a-responsible-rss-reader/</link><pubDate>Sun, 02 Jun 2024 00:00:00 +0000</pubDate><guid>https://shallowbrooksoftware.com/posts/bloggulus-a-responsible-rss-reader/</guid><description>&lt;p>Recently, Rachel by the Bay &lt;a href="https://rachelbythebay.com/w/2024/05/29/score/" class="external-link" target="_blank" rel="noopener">wrote about an idea&lt;/a> for &amp;ldquo;scoring&amp;rdquo; RSS feed readers.
Criteria would be things like: how often do they check, do they respect &lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/If-None-Match" class="external-link" target="_blank" rel="noopener">caching headers&lt;/a>, etc.
Since I maintain my own RSS reader / aggregator called &lt;a href="https://bloggulus.com" class="external-link" target="_blank" rel="noopener">Bloggulus&lt;/a>, I was curious to see how responsible my own program was.
Her previous posts have directly influenced my ability to make Bloggulus more efficient and more correct.
I messaged Rachel with interest in participating and she promptly replied with instructions on how to set things up.&lt;/p></description></item><item><title>The Court of Public Opinion</title><link>https://shallowbrooksoftware.com/posts/the-court-of-public-opinion/</link><pubDate>Sun, 26 May 2024 00:00:00 +0000</pubDate><guid>https://shallowbrooksoftware.com/posts/the-court-of-public-opinion/</guid><description>&lt;p>Over the past few weeks, I posted a couple of my Go-related blog posts to the &lt;a href="https://old.reddit.com/r/golang/" class="external-link" target="_blank" rel="noopener">r/golang&lt;/a> subreddit.
I don&amp;rsquo;t usually do this but have been asked the question numerous times: why don&amp;rsquo;t you share your writing anywhere?
Honestly, I don&amp;rsquo;t know the true answer.
Anxiety?
Fear of criticism?
Worried about wasting people&amp;rsquo;s time?
Regardless of the reason, I did end up posting a few and I think it went okay!&lt;/p></description></item><item><title>Parsing Recursive Polymorphic JSON in Go</title><link>https://shallowbrooksoftware.com/posts/parsing-recursive-polymorphic-json-in-go/</link><pubDate>Sun, 19 May 2024 00:00:00 +0000</pubDate><guid>https://shallowbrooksoftware.com/posts/parsing-recursive-polymorphic-json-in-go/</guid><description>&lt;p>Recently, I was helping a friend design a system for matching text against a flexible system of rules.
For example, I might want to know if a piece text contains the word &amp;ldquo;foo&amp;rdquo; or the word &amp;ldquo;bar&amp;rdquo;.
A rule can either be a single regex pattern or a series of patterns combined with a logical operation (&lt;code>AND&lt;/code>, &lt;code>OR&lt;/code>, or &lt;code>NOT&lt;/code>).
We&amp;rsquo;ll call this first rule &lt;code>Basic&lt;/code> and the second one &lt;code>Composite&lt;/code>.
Since the composite rule can contain both basic and other composite rules, we need a third type to represent &amp;ldquo;can be either basic or composite&amp;rdquo;.
We&amp;rsquo;ll call this type &lt;code>Rule&lt;/code>.&lt;/p></description></item><item><title>Two Ways to Build a Pyramid</title><link>https://shallowbrooksoftware.com/posts/two-ways-to-build-a-pyramid/</link><pubDate>Sun, 12 May 2024 00:00:00 +0000</pubDate><guid>https://shallowbrooksoftware.com/posts/two-ways-to-build-a-pyramid/</guid><description>&lt;p>Recently at work, I&amp;rsquo;ve been overseeing my first project as a tech lead / project manager.
Myself and two other developers are working together to rewrite and revamp a section of the application&amp;rsquo;s frontend.
In preparation, I needed to break down a set of requirements and design mocks into small, actionable tasks.&lt;/p>
&lt;p>Originally, I tried to plan the entire project upfront (we have roughly eight weeks of runway to complete it).
This required a huge amount of time!
The further into the future I planned, the harder it became to carve off specific tasks.
This was due to the uncertainty surrounding how the project would look at that point in time.
As another downside, this approach would&amp;rsquo;ve deferred delivering a usable frontend until the last few weeks of the project.
I eventually discovered that there was a better way to go about all of this.&lt;/p></description></item><item><title>Using Newer PostgreSQL Client Tools in GitHub Actions</title><link>https://shallowbrooksoftware.com/posts/using-newer-postgres-client-tools-in-github-actions/</link><pubDate>Sun, 05 May 2024 00:00:00 +0000</pubDate><guid>https://shallowbrooksoftware.com/posts/using-newer-postgres-client-tools-in-github-actions/</guid><description>&lt;p>Recently, while updating my &lt;a href="https://github.com/theandrew168/pg2s3" class="external-link" target="_blank" rel="noopener">pg2s3 utility&lt;/a>, I noticed that the project&amp;rsquo;s &lt;code>docker-compose.yml&lt;/code> file was pinning PostgreSQL to version 14.
I couldn&amp;rsquo;t remember why I did that, so I went ahead and removed it (what could go wrong?).
Unfortunately, this led to some automated tests failing in GitHub Actions!&lt;/p>
&lt;h1 id="the-problem">
 The Problem
 &lt;a class="heading-link" href="#the-problem">
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading">&lt;/i>
 &lt;span class="sr-only">Link to heading&lt;/span>
 &lt;/a>
&lt;/h1>
&lt;p>Thankfully, the error was very clear:&lt;/p>
&lt;pre tabindex="0">&lt;code>pg_dump: error: server version: 16.2 (Debian 16.2-1.pgdg120+2); pg_dump version: 14.11 (Ubuntu 14.11-1.pgdg22.04+1)
pg_dump: error: aborting because of server version mismatch
&lt;/code>&lt;/pre>&lt;p>Classic version mismatch.
The PostgreSQL 16 server (running in a container) was not compatible with the PostgreSQL 14 client tools (installed on the GitHub Actions runner).
For some context, pg2s3 uses &lt;code>pg_dump&lt;/code> and &lt;code>pg_restore&lt;/code> to quickly export and import data.&lt;/p></description></item><item><title>Mario Kart and the Maker's Schedule</title><link>https://shallowbrooksoftware.com/posts/mario-kart-and-the-makers-schedule/</link><pubDate>Sun, 28 Apr 2024 00:00:00 +0000</pubDate><guid>https://shallowbrooksoftware.com/posts/mario-kart-and-the-makers-schedule/</guid><description>&lt;p>Many years ago, I stumbled onto Paul Graham&amp;rsquo;s book &lt;a href="https://paulgraham.com/hp.html" class="external-link" target="_blank" rel="noopener">Hackers and Painters&lt;/a>.
It is a series of essays regarding software development, startup life, and spam filters.
Reading that book led me to Paul&amp;rsquo;s other writings and, more specifically, &lt;a href="https://www.paulgraham.com/articles.html" class="external-link" target="_blank" rel="noopener">his blog&lt;/a>.
One of the posts that I remember clearly and think about often is titled &lt;a href="https://www.paulgraham.com/makersschedule.html" class="external-link" target="_blank" rel="noopener">Makers&amp;rsquo;s Schedule, Manager&amp;rsquo;s Schedule&lt;/a>.&lt;/p>
&lt;p>In this essay, Paul contrasts the high-level schedules that power many makers (programmers) and managers.
Makers tend to find their maximum productivity within long spans of uninterrupted time (often four hours or more).
Writing software frequently requires sustained focus and the ability to juggle multiple complex ideas at the same time (this &lt;a href="https://imgur.com/3uyRWGJ" class="external-link" target="_blank" rel="noopener">classic comic&lt;/a> summarizes things quite well).
Managers, on the other hand, tend to have days that revolve around communication and coordination.
These exchanges often take the form of many short meetings speckled throughout the day.&lt;/p></description></item><item><title>Limiting Concurrency with Semaphores</title><link>https://shallowbrooksoftware.com/posts/limiting-concurrency-with-semaphores/</link><pubDate>Sun, 21 Apr 2024 00:00:00 +0000</pubDate><guid>https://shallowbrooksoftware.com/posts/limiting-concurrency-with-semaphores/</guid><description>&lt;p>I recently encountered some slowness while executing a bunch of tasks within a program.
Specifically, I was working on how &lt;a href="https://bloggulus.com/" class="external-link" target="_blank" rel="noopener">Bloggulus&lt;/a> syncs all of the blogs that it tracks (there are only 40 or so right now but I expect the number to grow).
Instead of naively syncing each blog serially, maybe concurrency can help.
Let&amp;rsquo;s find some ways to speed it up!&lt;/p>
&lt;h1 id="serial">
 Serial
 &lt;a class="heading-link" href="#serial">
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading">&lt;/i>
 &lt;span class="sr-only">Link to heading&lt;/span>
 &lt;/a>
&lt;/h1>
&lt;p>As a baseline, consider this simple program that executes multiple tasks in sequence.
Each job must be performed one after another until all have completed.
Instead of bogging you down the details of reading RSS feeds, I&amp;rsquo;ve simulated some work by sleeping for a quarter second before printing &amp;ldquo;job done!&amp;rdquo;:&lt;/p></description></item><item><title>Simple REST API Pagination</title><link>https://shallowbrooksoftware.com/posts/simple-rest-api-pagination/</link><pubDate>Sun, 14 Apr 2024 22:00:00 +0000</pubDate><guid>https://shallowbrooksoftware.com/posts/simple-rest-api-pagination/</guid><description>&lt;p>Recently, I&amp;rsquo;ve been working on revamping my &lt;a href="https://github.com/theandrew168/bloggulus" class="external-link" target="_blank" rel="noopener">Bloggulus&lt;/a> project to a split &lt;a href="https://developer.mozilla.org/en-US/docs/Glossary/REST" class="external-link" target="_blank" rel="noopener">REST API&lt;/a> + &lt;a href="https://developer.mozilla.org/en-US/docs/Glossary/SPA" class="external-link" target="_blank" rel="noopener">SPA&lt;/a> architecture (for fun and as an excuse to learn &lt;a href="https://kit.svelte.dev/" class="external-link" target="_blank" rel="noopener">SvelteKit&lt;/a>).
As a part of this effort, I took a moment to research and revisit how the API handles pagination.
Since the system holds hundreds of blogs and thousands of posts, returning &lt;em>all&lt;/em> items from a request would be slow and unwieldy.
Instead, the user (or web frontend) should be allowed to specify which set of items they want to view.
This is where pagination comes into play.&lt;/p></description></item><item><title>Instrumenting Go Web Apps</title><link>https://shallowbrooksoftware.com/posts/instrumenting-go-web-apps/</link><pubDate>Sun, 07 Apr 2024 23:00:00 +0000</pubDate><guid>https://shallowbrooksoftware.com/posts/instrumenting-go-web-apps/</guid><description>&lt;p>&lt;a href="https://prometheus.io/" class="external-link" target="_blank" rel="noopener">Prometheus&lt;/a> is an incredible open-source system for collecting, storing, and analyzing system metrics.
In addition to the server program, numerous &lt;a href="https://prometheus.io/docs/instrumenting/clientlibs/" class="external-link" target="_blank" rel="noopener">client libraries&lt;/a> have been written to simplify the process of exposing metrics in your own projects.
When writing Go-based web apps, I always include &lt;a href="https://github.com/prometheus/client_golang" class="external-link" target="_blank" rel="noopener">Go&amp;rsquo;s client library&lt;/a> so that information about the program can be collected, visualized, and monitored.
As outlined in the &lt;a href="https://prometheus.io/docs/guides/go-application/" class="external-link" target="_blank" rel="noopener">official guide&lt;/a>, it is very easy to get these basic metrics up and running:&lt;/p></description></item><item><title>A Multi-Platform Modern WebGL Demo</title><link>https://shallowbrooksoftware.com/posts/a-multi-platform-modern-webgl-demo/</link><pubDate>Sun, 31 Mar 2024 00:00:00 +0000</pubDate><guid>https://shallowbrooksoftware.com/posts/a-multi-platform-modern-webgl-demo/</guid><description>&lt;p>Nearly four years ago I wrote a &lt;a href="https://shallowbrooksoftware.com/posts/a-multi-platform-modern-opengl-demo-with-sdl2/" >blog post&lt;/a> about a native, cross-platform OpenGL demo that I&amp;rsquo;d written.
That post (which was only my second ever) was actually a response to &lt;em>another&lt;/em> &lt;a href="https://nullprogram.com/blog/2015/06/06/" class="external-link" target="_blank" rel="noopener">blog post&lt;/a> written by Chris Wellons (aka &lt;a href="https://nullprogram.com/" class="external-link" target="_blank" rel="noopener">null program&lt;/a>) on the same topic.
Back then, I spent &lt;strong>hours and hours&lt;/strong> just trying to figure out how I could write (and compile) a single C program that would run on all three major platforms: Windows, macOS, and Linux.
Chris used &lt;a href="https://www.glfw.org/" class="external-link" target="_blank" rel="noopener">GLFW3&lt;/a> to solve this problem while mine used &lt;a href="https://www.libsdl.org/" class="external-link" target="_blank" rel="noopener">SDL2&lt;/a> (both are valid options).
Here is a screenshot of the demo for reference:&lt;/p></description></item><item><title>Testing with Transactions</title><link>https://shallowbrooksoftware.com/posts/testing-with-transactions/</link><pubDate>Sun, 24 Mar 2024 00:00:00 +0000</pubDate><guid>https://shallowbrooksoftware.com/posts/testing-with-transactions/</guid><description>&lt;p>Most web applications eventually end up with tests that need to interact with a database.
Perhaps your business logic is tightly coupled to the database or maybe you are wanting to test a clearly-defined storage layer.
Either way, a common problem arises: how do you clean up the data used during testing? What should you do with all those scattered rows?&lt;/p>
&lt;p>Most of the time, developers will resort to a few common strategies:&lt;/p></description></item><item><title>How to Reset Grafana's Admin Password</title><link>https://shallowbrooksoftware.com/posts/how-to-reset-grafanas-admin-password/</link><pubDate>Sun, 17 Mar 2024 00:00:00 +0000</pubDate><guid>https://shallowbrooksoftware.com/posts/how-to-reset-grafanas-admin-password/</guid><description>&lt;p>The other day, I went to log into my self-hosted &lt;a href="https://grafana.com/oss/grafana/" class="external-link" target="_blank" rel="noopener">Grafana dashboard&lt;/a> (to confirm that my metrics server wasn&amp;rsquo;t running out of storage) and realized that I didn&amp;rsquo;t remember the password!
I usually save credentials to Firefox&amp;rsquo;s builtin password manager but I must&amp;rsquo;ve skipped that step when I initially configured Grafana.&lt;/p>
&lt;p>Either way, I needed to figure out if there was a way to reset the password without having any SMTP settings configured (meaning I couldn&amp;rsquo;t use the regular &amp;ldquo;Forget your password?&amp;rdquo; email link).
I do, however, have access to the physical server that hosts Grafana.
Perhaps it ships with some sort of password reset command line utility?&lt;/p></description></item><item><title>Conditional Embedding in Go</title><link>https://shallowbrooksoftware.com/posts/conditional-embedding-in-go/</link><pubDate>Sun, 10 Mar 2024 00:00:00 +0000</pubDate><guid>https://shallowbrooksoftware.com/posts/conditional-embedding-in-go/</guid><description>&lt;p>I was recently working on &lt;a href="https://github.com/theandrew168/bloggulus" class="external-link" target="_blank" rel="noopener">a project&lt;/a> where the frontend is a &lt;a href="https://kit.svelte.dev/" class="external-link" target="_blank" rel="noopener">Svelte&lt;/a> SPA and the backend is a &lt;a href="https://go.dev/" class="external-link" target="_blank" rel="noopener">Go&lt;/a> REST API.
At a high level, this is how my project is structured:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>main&lt;span style="color:#f92672">.&lt;/span>go
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>backend&lt;span style="color:#f92672">/&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># source files for Go REST API&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>frontend&lt;span style="color:#f92672">/&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> package&lt;span style="color:#f92672">.&lt;/span>json
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> src&lt;span style="color:#f92672">/&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># source files for Svelte SPA&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Since Go is awesome, I&amp;rsquo;ve been using its &lt;a href="https://pkg.go.dev/embed" class="external-link" target="_blank" rel="noopener">embed&lt;/a> feature to bake all of the compiled frontend files into the single output binary.
This works great when building for production: compile the frontend, build the backend, done!
This snapshots the frontend and backend code into a single, static binary.
For iterative local development, however, I &lt;em>don&amp;rsquo;t&lt;/em> want this behavior.
I instead want the frontend changes to be reflected without needing to rebuild and restart the backend.
In short, I want to say:&lt;/p></description></item><item><title>Behavioral Abstractions in TypeScript</title><link>https://shallowbrooksoftware.com/posts/behavioral-abstractions-in-typescript/</link><pubDate>Sun, 03 Mar 2024 00:00:00 +0000</pubDate><guid>https://shallowbrooksoftware.com/posts/behavioral-abstractions-in-typescript/</guid><description>&lt;p>Almost every application needs to communicate with the outside world in one form or another.
It could be by scraping a web page, hitting a REST API, or simply talking to a database.
If an application depends on the specific details of any of these communications, however, then it becomes much more difficult to test.
Instead, a program&amp;rsquo;s domain logic should depend on &lt;em>abstract behaviors&lt;/em> instead of concrete implementations.
I think that this is one of the most important facets of system design.&lt;/p></description></item><item><title>My Ideal Vacation</title><link>https://shallowbrooksoftware.com/posts/my-ideal-vacation/</link><pubDate>Sun, 25 Feb 2024 00:00:00 +0000</pubDate><guid>https://shallowbrooksoftware.com/posts/my-ideal-vacation/</guid><description>&lt;p>I recently returned from a short vacation to Kauai, Hawaii.
Kauai is a beautiful island complete with lush greenery, soothing waves, and breathtaking cliffs.
That being said, most things on the island were quite expensive (especially food) and we found ourselves spending more time in the car than I would&amp;rsquo;ve liked (there was so much to see).
One day, while sitting on the beach, I asked myself: &amp;ldquo;What would my ideal vacation look like?&amp;rdquo;.
I started jotting down some ideas.&lt;/p></description></item><item><title>My Current Opinions on Hosting Web Apps</title><link>https://shallowbrooksoftware.com/posts/my-current-opinions-on-hosting-web-apps/</link><pubDate>Sun, 18 Feb 2024 00:00:00 +0000</pubDate><guid>https://shallowbrooksoftware.com/posts/my-current-opinions-on-hosting-web-apps/</guid><description>&lt;p>A little while back, I was chatting with some tech friends about my experience using &lt;a href="https://fly.io/" class="external-link" target="_blank" rel="noopener">Fly&lt;/a> and &lt;a href="https://neon.tech/" class="external-link" target="_blank" rel="noopener">Neon&lt;/a> for hosting web apps that are under active development.
Between these two services and their low pricing for small projects, my total bill for the month was only $0.01 (Fly doesn&amp;rsquo;t even collect invoices below $5.00).
I shared how Fly and Neon seemed like a great fit for projects that are a work in progress but that I&amp;rsquo;m not sure if I&amp;rsquo;d use them for production services.
I&amp;rsquo;d have to do more pricing estimations and stability testing before having the trust and confidence needed to rely on these tools for anything that had users or was generating income.&lt;/p></description></item><item><title>Managing IP Allowlists with Ansible and UFW</title><link>https://shallowbrooksoftware.com/posts/managing-ip-allowlists-with-ansible-and-ufw/</link><pubDate>Sun, 11 Feb 2024 00:00:00 +0000</pubDate><guid>https://shallowbrooksoftware.com/posts/managing-ip-allowlists-with-ansible-and-ufw/</guid><description>&lt;p>I recently stood up a &amp;ldquo;Golden Age&amp;rdquo; minecraft server for my friends and me.
We&amp;rsquo;ve been having a great time so far building houses, cave bases, and clifftop observation decks.
Despite the initial fun, I&amp;rsquo;ve known that the server&amp;rsquo;s security posture was a bit&amp;hellip; shaky.
The server only allows a specific set of usernames to login, but, since the old authentication servers aren&amp;rsquo;t online anymore, the server has no choice but to trust the client.&lt;/p></description></item><item><title>Automating a Golden Age Minecraft Server</title><link>https://shallowbrooksoftware.com/posts/automating-a-golden-age-minecraft-server/</link><pubDate>Sun, 04 Feb 2024 00:00:00 +0000</pubDate><guid>https://shallowbrooksoftware.com/posts/automating-a-golden-age-minecraft-server/</guid><description>&lt;p>Lately, I&amp;rsquo;ve noticed a growing interest in what people like to call &amp;ldquo;Golden Age Minecraft&amp;rdquo; (&lt;a href="https://reddit.com/r/GoldenAgeMinecraft/" class="external-link" target="_blank" rel="noopener">reddit&lt;/a>).
This term typically refers to versions of Minecraft prior to Beta 1.8 / Release 1.0.0: &lt;a href="https://minecraft.wiki/w/Adventure_Update" class="external-link" target="_blank" rel="noopener">The Adventure Update&lt;/a>.
This update added a bunch of new features and, for better or for worse, introduced a true &amp;ldquo;goal&amp;rdquo; into the game: build up supplies, reach &lt;a href="https://minecraft.wiki/w/The_End" class="external-link" target="_blank" rel="noopener">The End&lt;/a>, and defeat the &lt;a href="https://minecraft.wiki/w/Ender_Dragon" class="external-link" target="_blank" rel="noopener">Ender Dragon&lt;/a>.
Prior to this update, Minecraft had no explicit goals and was truly a sandbox.
The only things to do were explore, build stuff, and find diamonds.
It was a simple loop that generated hundreds of hours of fun for my friends and I back in high school.&lt;/p></description></item><item><title>Utilizing All Cores in a NodeJS Web Application</title><link>https://shallowbrooksoftware.com/posts/utilizing-all-cores-in-a-nodejs-web-application/</link><pubDate>Sun, 28 Jan 2024 00:00:00 +0000</pubDate><guid>https://shallowbrooksoftware.com/posts/utilizing-all-cores-in-a-nodejs-web-application/</guid><description>&lt;p>Coming from Go-based web development to NodeJS, one big thing surpised me: my web server only ever uses one core.
This is because NodeJS is a single-threaded runtime environment.
That being said, NodeJS is still highly concurrent: it uses &lt;a href="https://libuv.org/" class="external-link" target="_blank" rel="noopener">modern event loop technology&lt;/a> to implement non-blocking, IO-based concurrency.
NodeJS might not be truly parallel, but it is certainly concurrent.
Knowing this, how is it that NodeJS performs reasonably well in server-side environments?
Is it only ever using a fraction of its available multi-core CPU power?
In some ways, yes, but in practice this isn&amp;rsquo;t usually a bottleneck.&lt;/p></description></item><item><title>Using Make to Run Concurrent Dev Services</title><link>https://shallowbrooksoftware.com/posts/using-make-to-run-concurrent-dev-services/</link><pubDate>Sun, 21 Jan 2024 00:00:00 +0000</pubDate><guid>https://shallowbrooksoftware.com/posts/using-make-to-run-concurrent-dev-services/</guid><description>&lt;p>This short post explains a useful trick for using &lt;a href="https://en.wikipedia.org/wiki/Make_%28software%29" class="external-link" target="_blank" rel="noopener">Make&lt;/a> to run multiple development services at the same time.
For example, one of my recent web projects required three active services in order to develop locally:&lt;/p>
&lt;ol>
&lt;li>Running the &lt;a href="https://go.dev/" class="external-link" target="_blank" rel="noopener">Go&lt;/a> backend&lt;/li>
&lt;li>Running &lt;a href="https://esbuild.github.io/" class="external-link" target="_blank" rel="noopener">esbuild&lt;/a> to (re)build the React + TypeScript frontend&lt;/li>
&lt;li>Running the &lt;a href="https://tailwindcss.com/blog/standalone-cli" class="external-link" target="_blank" rel="noopener">Tailwind CSS CLI&lt;/a> to re(build) the Tailwind CSS styles&lt;/li>
&lt;/ol>
&lt;p>Historically, I&amp;rsquo;d run each of these programs in a separate terminal window (or use something fancy like &lt;a href="https://github.com/tmux/tmux/wiki" class="external-link" target="_blank" rel="noopener">tmux&lt;/a>).
This is a fairly straightforward solution but I always found it somewhat clunky: alt-tabbing between terminals to restart or stop the services.&lt;/p></description></item><item><title>Implementing Make in Go</title><link>https://shallowbrooksoftware.com/posts/implementing-make-in-go/</link><pubDate>Sun, 14 Jan 2024 00:00:00 +0000</pubDate><guid>https://shallowbrooksoftware.com/posts/implementing-make-in-go/</guid><description>&lt;p>A while back, my buddy &lt;a href="https://brue.land/" class="external-link" target="_blank" rel="noopener">Wes&lt;/a> and I took a weekend trip to a remote cabin in eastern Iowa.
We try to do this once a year with plans of fishing, hiking, and simply enjoying the quietness of nature.
Not to mention the bliss of having no responsibilities for a few days!
Despite being an outdoorsy trip, I still brought my laptop because programming is my favorite hobby.
The internet in such remote locations is typically unreliable so I still consider it to be a nice disconnect.&lt;/p></description></item><item><title>Why Write?</title><link>https://shallowbrooksoftware.com/posts/why-write/</link><pubDate>Sun, 07 Jan 2024 00:00:00 +0000</pubDate><guid>https://shallowbrooksoftware.com/posts/why-write/</guid><description>&lt;p>How long has it been since my last post?
Let&amp;rsquo;s see&amp;hellip; about a week shy of 3 years!
Blogging is one of those &amp;ldquo;things I&amp;rsquo;d like to do more of&amp;rdquo; but never make time for.
I&amp;rsquo;ve still been writing code since my last post but I haven&amp;rsquo;t written about any of it.
I ran my own software company for a while, got a new job at a Silicon Valley startup, and even got married!
There are so many moments of progress and happiness that only exist in my memories (and photos, of course).
I&amp;rsquo;d like to fix this.&lt;/p></description></item><item><title>Learning From geohot's minikeyvalue Project</title><link>https://shallowbrooksoftware.com/posts/learning-from-geohots-minikeyvalue-project/</link><pubDate>Thu, 14 Jan 2021 00:00:00 +0000</pubDate><guid>https://shallowbrooksoftware.com/posts/learning-from-geohots-minikeyvalue-project/</guid><description>&lt;p>I first became aware of &lt;a href="https://github.com/geohot/minikeyvalue" class="external-link" target="_blank" rel="noopener">minikeyvalue&lt;/a> while watching a &lt;a href="https://www.youtube.com/watch?v=cAFjZ1gXBxc" class="external-link" target="_blank" rel="noopener">recording&lt;/a> of George&amp;rsquo;s programming livestream.
This project was written in &lt;a href="https://www.python.org/" class="external-link" target="_blank" rel="noopener">Python&lt;/a> and the design was simple: an HTTP-based interface for storing, getting, and deleting arbitrary content.
Many folks call this type of thing a &amp;ldquo;distributed key-value store&amp;rdquo;.
The project was originally inspired by &lt;a href="https://github.com/chrislusf/seaweedfs" class="external-link" target="_blank" rel="noopener">SeaweedFS&lt;/a> but had the goal of being much, much simpler (ideally less than 1000 lines of code).&lt;/p>
&lt;p>The architecture of the program is straightforward: a single &amp;ldquo;index server&amp;rdquo; distributes and organizes data between any number of &amp;ldquo;volume servers&amp;rdquo;.
The actual data could be anything: text, images, &lt;a href="https://www.sqlite.org/index.html" class="external-link" target="_blank" rel="noopener">SQLite&lt;/a> databases.
It doesn&amp;rsquo;t matter!
Everything is just bytes at the end of the day.&lt;/p></description></item><item><title>Ideas for Maximizing RISC-V's Potential</title><link>https://shallowbrooksoftware.com/posts/ideas-for-maximizing-riscvs-potential/</link><pubDate>Wed, 11 Nov 2020 00:00:00 +0000</pubDate><guid>https://shallowbrooksoftware.com/posts/ideas-for-maximizing-riscvs-potential/</guid><description>&lt;p>There has been a lot of buzz surrounding the slowness, instability, and complexity of modern software systems.
It seems as though more and more people are feeling and observing bloat and bugginess in their day-to-day usage of computers.
In many situations, the mediocrity of today&amp;rsquo;s technology has become so common that it isn&amp;rsquo;t even seen as an issue.&lt;/p>
&lt;p>During my few years spent in industry, these sort of quotes were heard almost daily:&lt;/p></description></item><item><title>Designing Python Web Servers</title><link>https://shallowbrooksoftware.com/posts/designing-python-web-servers/</link><pubDate>Wed, 02 Sep 2020 00:00:00 +0000</pubDate><guid>https://shallowbrooksoftware.com/posts/designing-python-web-servers/</guid><description>&lt;p>I&amp;rsquo;ve spent the last few days designing and benchmarking extremely minimal pure-Python web servers.
There is a tech myth / superstition that exposing python web servers to the internet is a bad idea but I&amp;rsquo;ve seen little to no evidence as to why this is supposedly the case.
Are they too slow?
Are they too insecure for some reason?
One thing is for sure: performance must always be measured, not guessed.&lt;/p></description></item><item><title>Wrapping Up Squeaky</title><link>https://shallowbrooksoftware.com/posts/wrapping-up-squeaky/</link><pubDate>Tue, 25 Aug 2020 00:00:00 +0000</pubDate><guid>https://shallowbrooksoftware.com/posts/wrapping-up-squeaky/</guid><description>&lt;p>My primary project for the last month or so has a been a proof of concept programming language called &lt;a href="https://github.com/theandrew168/squeaky" class="external-link" target="_blank" rel="noopener">Squeaky&lt;/a>.
I&amp;rsquo;ve had this idea in my head for a few years: build a functional language in C with a focus on game development.
I wanted window creation, OpenGL graphics, and input events to all be first class citizens of the language and not optional libraries to be pulled in later.
Cross-platform portability was important, too.
If you write a game that utilizes the language&amp;rsquo;s builtin capabilities for graphics and keyboard input, it should work the same on all major platforms: Windows, macOS, and Linux.&lt;/p></description></item><item><title>Revamping My Old CHIP-8 Emulator</title><link>https://shallowbrooksoftware.com/posts/revamping-my-old-chip8-emulator/</link><pubDate>Thu, 09 Jul 2020 00:00:00 +0000</pubDate><guid>https://shallowbrooksoftware.com/posts/revamping-my-old-chip8-emulator/</guid><description>&lt;p>Back in 2017 I was really interested in emulator development.
I read that &lt;a href="https://en.wikipedia.org/wiki/CHIP-8" class="external-link" target="_blank" rel="noopener">CHIP-8&lt;/a> was a great introductory system and decided to write my own emulator for it.
I was a C programming novice at the time but figured it&amp;rsquo;d still be a good choice for a project that dealt with a lot of low-level details and mechanics.
After a few weeks of work I was able to successfully emulate CHIP-8 games but knew that there were some lingering bugs.
Once I cleaned them up and got the finished the project, I moved on and never touched the codebase again.
You can find this old version at &lt;a href="https://github.com/theandrew168/skylark/tree/a24585b48de2923fd016f379c7b0ad8cbb0a9d75" class="external-link" target="_blank" rel="noopener">this commit&lt;/a>.&lt;/p></description></item><item><title>Loading OpenGL Functions for Fun and Profit</title><link>https://shallowbrooksoftware.com/posts/loading-opengl-functions-for-fun-and-profit/</link><pubDate>Wed, 17 Jun 2020 00:00:00 +0000</pubDate><guid>https://shallowbrooksoftware.com/posts/loading-opengl-functions-for-fun-and-profit/</guid><description>&lt;p>While writing my &lt;a href="https://shallowbrooksoftware.com/posts/a-multi-platform-modern-opengl-demo-with-sdl2/" >previous blog post&lt;/a>, I realized that there is a general information gap around dynamically loading OpenGL functions.
When developers encounter this task on new OpenGL-related projects, they tend to reach for a premade loader such as &lt;a href="http://glew.sourceforge.net/" class="external-link" target="_blank" rel="noopener">glew&lt;/a>, &lt;a href="https://github.com/skaslev/gl3w" class="external-link" target="_blank" rel="noopener">gl3w&lt;/a>, &lt;a href="https://bitbucket.org/alfonse/glloadgen/wiki/Home" class="external-link" target="_blank" rel="noopener">glLoadGen&lt;/a>, or &lt;a href="https://github.com/Dav1dde/glad" class="external-link" target="_blank" rel="noopener">GLAD&lt;/a>.
A more detailed list along with an overview of what all these libraries do can be found &lt;a href="https://www.khronos.org/opengl/wiki/OpenGL_Loading_Library" class="external-link" target="_blank" rel="noopener">here&lt;/a>.&lt;/p>
&lt;p>&lt;strong>&amp;ldquo;An OpenGL Loading Library is a library that loads pointers to OpenGL functions at runtime, core as well as extensions. This is required to access functions from OpenGL versions above 1.1 on most platforms. Extension loading libraries also abstracts away the difference between the loading mechanisms on different platforms.&amp;rdquo;&lt;/strong> - &lt;a href="https://www.khronos.org/opengl/wiki/OpenGL_Loading_Library" class="external-link" target="_blank" rel="noopener">Khronos Docs&lt;/a>&lt;/p></description></item><item><title>A Multi-Platform Modern OpenGL Demo with SDL2</title><link>https://shallowbrooksoftware.com/posts/a-multi-platform-modern-opengl-demo-with-sdl2/</link><pubDate>Sun, 07 Jun 2020 00:00:00 +0000</pubDate><guid>https://shallowbrooksoftware.com/posts/a-multi-platform-modern-opengl-demo-with-sdl2/</guid><description>&lt;p>This post is largely inspired by &lt;a href="https://nullprogram.com/" class="external-link" target="_blank" rel="noopener">Chris Wellons&amp;rsquo;&lt;/a> 2015 blog post about writing a &lt;a href="https://nullprogram.com/blog/2015/06/06/" class="external-link" target="_blank" rel="noopener">modern OpenGL demo&lt;/a> that works on all three major desktop platforms (Windows, macOS, and Linux).
I have come back to his post countless times over the years when looking for guidance on how to build any cross-platform C program.&lt;/p>
&lt;p>In Chris&amp;rsquo; version of this demo he makes use of &lt;a href="https://www.glfw.org/" class="external-link" target="_blank" rel="noopener">GLFW3&lt;/a> for the window and input handling and uses &lt;a href="https://github.com/skaslev/gl3w" class="external-link" target="_blank" rel="noopener">gl3w&lt;/a> for loading &lt;a href="https://www.opengl.org/" class="external-link" target="_blank" rel="noopener">OpenGL&lt;/a> functions.
I have used GLFW3 in the past, but tend to prefer &lt;a href="https://www.libsdl.org/" class="external-link" target="_blank" rel="noopener">SDL2&lt;/a> for its &lt;a href="https://wiki.libsdl.org/Introduction" class="external-link" target="_blank" rel="noopener">wealth of features&lt;/a> and &lt;a href="https://wiki.libsdl.org/SDL_PollEvent" class="external-link" target="_blank" rel="noopener">polling-based event model&lt;/a>.
Therefore, in my version, I wanted to use SDL2 for the window and input handling and load the OpenGL functions myself.
Loading OpenGL functions is a fiddly, quirky topic that deserves its own &lt;a href="https://shallowbrooksoftware.com/posts/loading-opengl-fuctions-for-fun-and-profit/" >blog post&lt;/a>.
However, it doesn&amp;rsquo;t require too much code once the nuances are understood.&lt;/p></description></item><item><title>Bare-Metal Assembly on the Longan Nano</title><link>https://shallowbrooksoftware.com/posts/bare-metal-assembly-on-the-longan-nano/</link><pubDate>Fri, 24 Apr 2020 00:00:00 +0000</pubDate><guid>https://shallowbrooksoftware.com/posts/bare-metal-assembly-on-the-longan-nano/</guid><description>&lt;p>The &lt;a href="https://www.seeedstudio.com/Sipeed-Longan-Nano-RISC-V-GD32VF103CBT6-Development-Board-p-4205.html" class="external-link" target="_blank" rel="noopener">Sipeed Longan Nano&lt;/a> is a small, affordable, 32-bit &lt;a href="https://en.wikipedia.org/wiki/RISC-V" class="external-link" target="_blank" rel="noopener">RISC-V&lt;/a> chip.
Despite its minimalism, the Longan Nano provides enough power and peripherals to learn RISC-V assembly and build exciting programs along the way.&lt;/p>
&lt;p>The Longan Nano comes with the following components:&lt;/p>
&lt;ul>
&lt;li>GigaDevice GD32VF103[CBT6] 32-bit CPU&lt;/li>
&lt;li>8 MHz default clock speed (IRC8M)&lt;/li>
&lt;li>108 MHz maximum clock speed&lt;/li>
&lt;li>128 KB flash storage&lt;/li>
&lt;li>32 KB sram memory&lt;/li>
&lt;li>3 LEDs (red, green, and blue)&lt;/li>
&lt;li>1 USB Type-C port&lt;/li>
&lt;li>1 microSD card slot&lt;/li>
&lt;li>160x80 pixel LCD (0.96 inches)&lt;/li>
&lt;li>2 Buttons (RESET and BOOT)&lt;/li>
&lt;/ul>
&lt;p>With the specs out of the way, we can begin the journey of figuring out how to go from a blank text file to controlling all aspects of our hardware.
Get ready to discuss registers, design clean programs, and dive into some datasheets.&lt;/p></description></item><item><title>About Me</title><link>https://shallowbrooksoftware.com/about/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://shallowbrooksoftware.com/about/</guid><description>&lt;p>Welcome to &lt;strong>Shallow Brook Software&lt;/strong>!&lt;/p>
&lt;p>My name is Andrew Dailey and I&amp;rsquo;m a software developer located in Des Moines, Iowa.
I have a Bachelor of Science degree in Software Engineering from Iowa State University (graduated in 2017).
I have multiple years of industry experience working a variety of positions including Linux system administration, Python-based ETL, large-scale cluster automation, and full-stack web development.
Software development is one of my primary hobbies and I tend to specialize in backend / systems programming.&lt;/p></description></item></channel></rss>