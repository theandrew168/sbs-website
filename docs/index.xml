<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Shallow Brook Software</title><link>https://shallowbrooksoftware.com/</link><description>Recent content on Shallow Brook Software</description><generator>Hugo</generator><language>en</language><lastBuildDate>Sun, 16 Jun 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://shallowbrooksoftware.com/index.xml" rel="self" type="application/rss+xml"/><item><title>Reinforcing Indirect Joins</title><link>https://shallowbrooksoftware.com/posts/reinforcing-indirect-joins/</link><pubDate>Sun, 16 Jun 2024 00:00:00 +0000</pubDate><guid>https://shallowbrooksoftware.com/posts/reinforcing-indirect-joins/</guid><description>Recently, I ran into an issue where a very large PostgreSQL query (involving roughly 30 tables) was taking much longer to plan than to execute. At its worst, it was taking multiple seconds to plan and a few hundred milliseconds to execute. My problem wasn&amp;rsquo;t really one of query optimization: I was already past that. This was a problem of query complexity and trying to get the PostgreSQL planner/optimizer to more quickly arrive at an ideal query.</description></item><item><title>Bloggulus Outage Postmortem</title><link>https://shallowbrooksoftware.com/posts/bloggulus-outage-postmortem/</link><pubDate>Sun, 09 Jun 2024 00:00:00 +0000</pubDate><guid>https://shallowbrooksoftware.com/posts/bloggulus-outage-postmortem/</guid><description>On June 4, 2024, Bloggulus was down for just under 7 hours. Despite being offline for so long, the immediate fix only took only ~30 minutes to find and apply once I became aware of the issue. This post details how I went about fixing the problem and then digs deeper into what actually happened. I also discuss a few gaps in server monitoring and notification delivery.
Bloggulus is Down Link to heading I didn&amp;rsquo;t actually become aware of the site being down until I visited it myself and received a 502 Bad Gateway.</description></item><item><title>Bloggulus: A Responsible RSS Reader</title><link>https://shallowbrooksoftware.com/posts/bloggulus-a-responsible-rss-reader/</link><pubDate>Sun, 02 Jun 2024 00:00:00 +0000</pubDate><guid>https://shallowbrooksoftware.com/posts/bloggulus-a-responsible-rss-reader/</guid><description>Recently, Rachel by the Bay wrote about an idea for &amp;ldquo;scoring&amp;rdquo; RSS feed readers. Criteria would be things like: how often do they check, do they respect caching headers, etc. Since I maintain my own RSS reader / aggregator called Bloggulus, I was curious to see how responsible my own program was. Her previous posts have directly influenced my ability to make Bloggulus more efficient and more correct. I messaged Rachel with interest in participating and she promptly replied with instructions on how to set things up.</description></item><item><title>The Court of Public Opinion</title><link>https://shallowbrooksoftware.com/posts/the-court-of-public-opinion/</link><pubDate>Sun, 26 May 2024 00:00:00 +0000</pubDate><guid>https://shallowbrooksoftware.com/posts/the-court-of-public-opinion/</guid><description>Over the past few weeks, I posted a couple of my Go-related blog posts to the r/golang subreddit. I don&amp;rsquo;t usually do this but have been asked the question numerous times: why don&amp;rsquo;t you share your writing anywhere? Honestly, I don&amp;rsquo;t know the true answer. Anxiety? Fear of criticism? Worried about wasting people&amp;rsquo;s time? Regardless of the reason, I did end up posting a few and I think it went okay!</description></item><item><title>Parsing Recursive Polymorphic JSON in Go</title><link>https://shallowbrooksoftware.com/posts/parsing-recursive-polymorphic-json-in-go/</link><pubDate>Sun, 19 May 2024 00:00:00 +0000</pubDate><guid>https://shallowbrooksoftware.com/posts/parsing-recursive-polymorphic-json-in-go/</guid><description>Recently, I was helping a friend design a system for matching text against a flexible system of rules. For example, I might want to know if a piece text contains the word &amp;ldquo;foo&amp;rdquo; or the word &amp;ldquo;bar&amp;rdquo;. A rule can either be a single regex pattern or a series of patterns combined with a logical operation (AND, OR, or NOT). We&amp;rsquo;ll call this first rule Basic and the second one Composite.</description></item><item><title>Two Ways to Build a Pyramid</title><link>https://shallowbrooksoftware.com/posts/two-ways-to-build-a-pyramid/</link><pubDate>Sun, 12 May 2024 00:00:00 +0000</pubDate><guid>https://shallowbrooksoftware.com/posts/two-ways-to-build-a-pyramid/</guid><description>Recently at work, I&amp;rsquo;ve been overseeing my first project as a tech lead / project manager. Myself and two other developers are working together to rewrite and revamp a section of the application&amp;rsquo;s frontend. In preparation, I needed to break down a set of requirements and design mocks into small, actionable tasks.
Originally, I tried to plan the entire project upfront (we have roughly eight weeks of runway to complete it).</description></item><item><title>Using Newer PostgreSQL Client Tools in GitHub Actions</title><link>https://shallowbrooksoftware.com/posts/using-newer-postgres-client-tools-in-github-actions/</link><pubDate>Sun, 05 May 2024 00:00:00 +0000</pubDate><guid>https://shallowbrooksoftware.com/posts/using-newer-postgres-client-tools-in-github-actions/</guid><description>Recently, while updating my pg2s3 utility, I noticed that the project&amp;rsquo;s docker-compose.yml file was pinning PostgreSQL to version 14. I couldn&amp;rsquo;t remember why I did that, so I went ahead and removed it (what could go wrong?). Unfortunately, this led to some automated tests failing in GitHub Actions!
The Problem Link to heading Thankfully, the error was very clear:
pg_dump: error: server version: 16.2 (Debian 16.2-1.pgdg120+2); pg_dump version: 14.11 (Ubuntu 14.</description></item><item><title>Mario Kart and the Maker's Schedule</title><link>https://shallowbrooksoftware.com/posts/mario-kart-and-the-makers-schedule/</link><pubDate>Sun, 28 Apr 2024 00:00:00 +0000</pubDate><guid>https://shallowbrooksoftware.com/posts/mario-kart-and-the-makers-schedule/</guid><description>Many years ago, I stumbled onto Paul Graham&amp;rsquo;s book Hackers and Painters. It is a series of essays regarding software development, startup life, and spam filters. Reading that book led me to Paul&amp;rsquo;s other writings and, more specifically, his blog. One of the posts that I remember clearly and think about often is titled Makers&amp;rsquo;s Schedule, Manager&amp;rsquo;s Schedule.
In this essay, Paul contrasts the high-level schedules that power many makers (programmers) and managers.</description></item><item><title>Limiting Concurrency with Semaphores</title><link>https://shallowbrooksoftware.com/posts/limiting-concurrency-with-semaphores/</link><pubDate>Sun, 21 Apr 2024 00:00:00 +0000</pubDate><guid>https://shallowbrooksoftware.com/posts/limiting-concurrency-with-semaphores/</guid><description>I recently encountered some slowness while executing a bunch of tasks within a program. Specifically, I was working on how Bloggulus syncs all of the blogs that it tracks (there are only 40 or so right now but I expect the number to grow). Instead of naively syncing each blog serially, maybe concurrency can help. Let&amp;rsquo;s find some ways to speed it up!
Serial Link to heading As a baseline, consider this simple program that executes multiple tasks in sequence.</description></item><item><title>Simple REST API Pagination</title><link>https://shallowbrooksoftware.com/posts/simple-rest-api-pagination/</link><pubDate>Sun, 14 Apr 2024 22:00:00 +0000</pubDate><guid>https://shallowbrooksoftware.com/posts/simple-rest-api-pagination/</guid><description>Recently, I&amp;rsquo;ve been working on revamping my Bloggulus project to a split REST API + SPA architecture (for fun and as an excuse to learn SvelteKit). As a part of this effort, I took a moment to research and revisit how the API handles pagination. Since the system holds hundreds of blogs and thousands of posts, returning all items from a request would be slow and unwieldy. Instead, the user (or web frontend) should be allowed to specify which set of items they want to view.</description></item><item><title>Instrumenting Go Web Apps</title><link>https://shallowbrooksoftware.com/posts/instrumenting-go-web-apps/</link><pubDate>Sun, 07 Apr 2024 23:00:00 +0000</pubDate><guid>https://shallowbrooksoftware.com/posts/instrumenting-go-web-apps/</guid><description>Prometheus is an incredible open-source system for collecting, storing, and analyzing system metrics. In addition to the server program, numerous client libraries have been written to simplify the process of exposing metrics in your own projects. When writing Go-based web apps, I always include Go&amp;rsquo;s client library so that information about the program can be collected, visualized, and monitored. As outlined in the official guide, it is very easy to get these basic metrics up and running:</description></item><item><title>A Multi-Platform Modern WebGL Demo</title><link>https://shallowbrooksoftware.com/posts/a-multi-platform-modern-webgl-demo/</link><pubDate>Sun, 31 Mar 2024 00:00:00 +0000</pubDate><guid>https://shallowbrooksoftware.com/posts/a-multi-platform-modern-webgl-demo/</guid><description>Nearly four years ago I wrote a blog post about a native, cross-platform OpenGL demo that I&amp;rsquo;d written. That post (which was only my second ever) was actually a response to another blog post written by Chris Wellons (aka null program) on the same topic. Back then, I spent hours and hours just trying to figure out how I could write (and compile) a single C program that would run on all three major platforms: Windows, macOS, and Linux.</description></item><item><title>Testing with Transactions</title><link>https://shallowbrooksoftware.com/posts/testing-with-transactions/</link><pubDate>Sun, 24 Mar 2024 00:00:00 +0000</pubDate><guid>https://shallowbrooksoftware.com/posts/testing-with-transactions/</guid><description>Most web applications eventually end up with tests that need to interact with a database. Perhaps your business logic is tightly coupled to the database or maybe you are wanting to test a clearly-defined storage layer. Either way, a common problem arises: how do you clean up the data used during testing? What should you do with all those scattered rows?
Most of the time, developers will resort to a few common strategies:</description></item><item><title>How to Reset Grafana's Admin Password</title><link>https://shallowbrooksoftware.com/posts/how-to-reset-grafanas-admin-password/</link><pubDate>Sun, 17 Mar 2024 00:00:00 +0000</pubDate><guid>https://shallowbrooksoftware.com/posts/how-to-reset-grafanas-admin-password/</guid><description>The other day, I went to log into my self-hosted Grafana dashboard (to confirm that my metrics server wasn&amp;rsquo;t running out of storage) and realized that I didn&amp;rsquo;t remember the password! I usually save credentials to Firefox&amp;rsquo;s builtin password manager but I must&amp;rsquo;ve skipped that step when I initially configured Grafana.
Either way, I needed to figure out if there was a way to reset the password without having any SMTP settings configured (meaning I couldn&amp;rsquo;t use the regular &amp;ldquo;Forget your password?</description></item><item><title>Conditional Embedding in Go</title><link>https://shallowbrooksoftware.com/posts/conditional-embedding-in-go/</link><pubDate>Sun, 10 Mar 2024 00:00:00 +0000</pubDate><guid>https://shallowbrooksoftware.com/posts/conditional-embedding-in-go/</guid><description>I was recently working on a project where the frontend is a Svelte SPA and the backend is a Go REST API. At a high level, this is how my project is structured:
main.go backend/ # source files for Go REST API frontend/ package.json src/ # source files for Svelte SPA Since Go is awesome, I&amp;rsquo;ve been using its embed feature to bake all of the compiled frontend files into the single output binary.</description></item><item><title>Behavioral Abstractions in TypeScript</title><link>https://shallowbrooksoftware.com/posts/behavioral-abstractions-in-typescript/</link><pubDate>Sun, 03 Mar 2024 00:00:00 +0000</pubDate><guid>https://shallowbrooksoftware.com/posts/behavioral-abstractions-in-typescript/</guid><description>Almost every application needs to communicate with the outside world in one form or another. It could be by scraping a web page, hitting a REST API, or simply talking to a database. If an application depends on the specific details of any of these communications, however, then it becomes much more difficult to test. Instead, a program&amp;rsquo;s domain logic should depend on abstract behaviors instead of concrete implementations. I think that this is one of the most important facets of system design.</description></item><item><title>My Ideal Vacation</title><link>https://shallowbrooksoftware.com/posts/my-ideal-vacation/</link><pubDate>Sun, 25 Feb 2024 00:00:00 +0000</pubDate><guid>https://shallowbrooksoftware.com/posts/my-ideal-vacation/</guid><description>I recently returned from a short vacation to Kauai, Hawaii. Kauai is a beautiful island complete with lush greenery, soothing waves, and breathtaking cliffs. That being said, most things on the island were quite expensive (especially food) and we found ourselves spending more time in the car than I would&amp;rsquo;ve liked (there was so much to see). One day, while sitting on the beach, I asked myself: &amp;ldquo;What would my ideal vacation look like?</description></item><item><title>My Current Opinions on Hosting Web Apps</title><link>https://shallowbrooksoftware.com/posts/my-current-opinions-on-hosting-web-apps/</link><pubDate>Sun, 18 Feb 2024 00:00:00 +0000</pubDate><guid>https://shallowbrooksoftware.com/posts/my-current-opinions-on-hosting-web-apps/</guid><description>A little while back, I was chatting with some tech friends about my experience using Fly and Neon for hosting web apps that are under active development. Between these two services and their low pricing for small projects, my total bill for the month was only $0.01 (Fly doesn&amp;rsquo;t even collect invoices below $5.00). I shared how Fly and Neon seemed like a great fit for projects that are a work in progress but that I&amp;rsquo;m not sure if I&amp;rsquo;d use them for production services.</description></item><item><title>Managing IP Allowlists with Ansible and UFW</title><link>https://shallowbrooksoftware.com/posts/managing-ip-allowlists-with-ansible-and-ufw/</link><pubDate>Sun, 11 Feb 2024 00:00:00 +0000</pubDate><guid>https://shallowbrooksoftware.com/posts/managing-ip-allowlists-with-ansible-and-ufw/</guid><description>I recently stood up a &amp;ldquo;Golden Age&amp;rdquo; minecraft server for my friends and me. We&amp;rsquo;ve been having a great time so far building houses, cave bases, and clifftop observation decks. Despite the initial fun, I&amp;rsquo;ve known that the server&amp;rsquo;s security posture was a bit&amp;hellip; shaky. The server only allows a specific set of usernames to login, but, since the old authentication servers aren&amp;rsquo;t online anymore, the server has no choice but to trust the client.</description></item><item><title>Automating a Golden Age Minecraft Server</title><link>https://shallowbrooksoftware.com/posts/automating-a-golden-age-minecraft-server/</link><pubDate>Sun, 04 Feb 2024 00:00:00 +0000</pubDate><guid>https://shallowbrooksoftware.com/posts/automating-a-golden-age-minecraft-server/</guid><description>Lately, I&amp;rsquo;ve noticed a growing interest in what people like to call &amp;ldquo;Golden Age Minecraft&amp;rdquo; (reddit). This term typically refers to versions of Minecraft prior to Beta 1.8 / Release 1.0.0: The Adventure Update. This update added a bunch of new features and, for better or for worse, introduced a true &amp;ldquo;goal&amp;rdquo; into the game: build up supplies, reach The End, and defeat the Ender Dragon. Prior to this update, Minecraft had no explicit goals and was truly a sandbox.</description></item><item><title>Utilizing All Cores in a NodeJS Web Application</title><link>https://shallowbrooksoftware.com/posts/utilizing-all-cores-in-a-nodejs-web-application/</link><pubDate>Sun, 28 Jan 2024 00:00:00 +0000</pubDate><guid>https://shallowbrooksoftware.com/posts/utilizing-all-cores-in-a-nodejs-web-application/</guid><description>Coming from Go-based web development to NodeJS, one big thing surpised me: my web server only ever uses one core. This is because NodeJS is a single-threaded runtime environment. That being said, NodeJS is still highly concurrent: it uses modern event loop technology to implement non-blocking, IO-based concurrency. NodeJS might not be truly parallel, but it is certainly concurrent. Knowing this, how is it that NodeJS performs reasonably well in server-side environments?</description></item><item><title>Using Make to Run Concurrent Dev Services</title><link>https://shallowbrooksoftware.com/posts/using-make-to-run-concurrent-dev-services/</link><pubDate>Sun, 21 Jan 2024 00:00:00 +0000</pubDate><guid>https://shallowbrooksoftware.com/posts/using-make-to-run-concurrent-dev-services/</guid><description>This short post explains a useful trick for using Make to run multiple development services at the same time. For example, one of my recent web projects required three active services in order to develop locally:
Running the Go backend Running esbuild to (re)build the React+TypeScript frontend Running the Tailwind CSS CLI to re(build) the Tailwind CSS styles Historically, I&amp;rsquo;d run each of these programs in a separate terminal window (or use something fancy like tmux).</description></item><item><title>Implementing Make in Go</title><link>https://shallowbrooksoftware.com/posts/implementing-make-in-go/</link><pubDate>Sun, 14 Jan 2024 00:00:00 +0000</pubDate><guid>https://shallowbrooksoftware.com/posts/implementing-make-in-go/</guid><description>A while back, my buddy Wes and I took a weekend trip to a remote cabin in eastern Iowa. We try to do this once a year with plans of fishing, hiking, and simply enjoying the quietness of nature. Not to mention the bliss of having no responsibilities for a few days! Despite being an outdoorsy trip, I still brought my laptop because programming is my favorite hobby. The internet in such remote locations is typically unreliable so I still consider it to be a nice disconnect.</description></item><item><title>Why Write?</title><link>https://shallowbrooksoftware.com/posts/why-write/</link><pubDate>Sun, 07 Jan 2024 00:00:00 +0000</pubDate><guid>https://shallowbrooksoftware.com/posts/why-write/</guid><description>How long has it been since my last post? Let&amp;rsquo;s see&amp;hellip; about a week shy of 3 years! Blogging is one of those &amp;ldquo;things I&amp;rsquo;d like to do more of&amp;rdquo; but never make time for. I&amp;rsquo;ve still been writing code since my last post but I haven&amp;rsquo;t written about any of it. I ran my own software company for a while, got a new job at a Silicon Valley startup, and even got married!</description></item><item><title>Learning From geohot's minikeyvalue Project</title><link>https://shallowbrooksoftware.com/posts/learning-from-geohots-minikeyvalue-project/</link><pubDate>Thu, 14 Jan 2021 00:00:00 +0000</pubDate><guid>https://shallowbrooksoftware.com/posts/learning-from-geohots-minikeyvalue-project/</guid><description>I first became aware of minikeyvalue while watching a recording of George&amp;rsquo;s programming livestream. This project was written in Python and the design was simple: an HTTP-based interface for storing, getting, and deleting arbitrary content. Many folks call this type of thing a &amp;ldquo;distributed key-value store&amp;rdquo;. The project was originally inspired by SeaweedFS but had the goal of being much, much simpler (ideally less than 1000 lines of code).
The architecture of the program is straightforward: a single &amp;ldquo;index server&amp;rdquo; distributes and organizes data between any number of &amp;ldquo;volume servers&amp;rdquo;.</description></item><item><title>Ideas for Maximizing RISC-V's Potential</title><link>https://shallowbrooksoftware.com/posts/ideas-for-maximizing-riscvs-potential/</link><pubDate>Wed, 11 Nov 2020 00:00:00 +0000</pubDate><guid>https://shallowbrooksoftware.com/posts/ideas-for-maximizing-riscvs-potential/</guid><description>There has been a lot of buzz surrounding the slowness, instability, and complexity of modern software systems. It seems as though more and more people are feeling and observing bloat and bugginess in their day-to-day usage of computers. In many situations, the mediocrity of today&amp;rsquo;s technology has become so common that it isn&amp;rsquo;t even seen as an issue.
During my few years spent in industry, these sort of quotes were heard almost daily:</description></item><item><title>Designing Python Web Servers</title><link>https://shallowbrooksoftware.com/posts/designing-python-web-servers/</link><pubDate>Wed, 02 Sep 2020 00:00:00 +0000</pubDate><guid>https://shallowbrooksoftware.com/posts/designing-python-web-servers/</guid><description>I&amp;rsquo;ve spent the last few days designing and benchmarking extremely minimal pure-Python web servers. There is a tech myth / superstition that exposing python web servers to the internet is a bad idea but I&amp;rsquo;ve seen little to no evidence as to why this is supposedly the case. Are they too slow? Are they too insecure for some reason? One thing is for sure: performance must always be measured, not guessed.</description></item><item><title>Wrapping Up Squeaky</title><link>https://shallowbrooksoftware.com/posts/wrapping-up-squeaky/</link><pubDate>Tue, 25 Aug 2020 00:00:00 +0000</pubDate><guid>https://shallowbrooksoftware.com/posts/wrapping-up-squeaky/</guid><description>My primary project for the last month or so has a been a proof of concept programming language called Squeaky. I&amp;rsquo;ve had this idea in my head for a few years: build a functional language in C with a focus on game development. I wanted window creation, OpenGL graphics, and input events to all be first class citizens of the language and not optional libraries to be pulled in later. Cross-platform portability was important, too.</description></item><item><title>Revamping My Old CHIP-8 Emulator</title><link>https://shallowbrooksoftware.com/posts/revamping-my-old-chip8-emulator/</link><pubDate>Thu, 09 Jul 2020 00:00:00 +0000</pubDate><guid>https://shallowbrooksoftware.com/posts/revamping-my-old-chip8-emulator/</guid><description>Back in 2017 I was really interested in emulator development. I read that CHIP-8 was a great introductory system and decided to write my own emulator for it. I was a C programming novice at the time but figured it&amp;rsquo;d still be a good choice for a project that dealt with a lot of low-level details and mechanics. After a few weeks of work I was able to successfully emulate CHIP-8 games but knew that there were some lingering bugs.</description></item><item><title>Loading OpenGL Functions for Fun and Profit</title><link>https://shallowbrooksoftware.com/posts/loading-opengl-functions-for-fun-and-profit/</link><pubDate>Wed, 17 Jun 2020 00:00:00 +0000</pubDate><guid>https://shallowbrooksoftware.com/posts/loading-opengl-functions-for-fun-and-profit/</guid><description>While writing my previous blog post, I realized that there is a general information gap around dynamically loading OpenGL functions. When developers encounter this task on new OpenGL-related projects, they tend to reach for a premade loader such as glew, gl3w, glLoadGen, or GLAD. A more detailed list along with an overview of what all these libraries do can be found here.
&amp;ldquo;An OpenGL Loading Library is a library that loads pointers to OpenGL functions at runtime, core as well as extensions.</description></item><item><title>A Multi-Platform Modern OpenGL Demo with SDL2</title><link>https://shallowbrooksoftware.com/posts/a-multi-platform-modern-opengl-demo-with-sdl2/</link><pubDate>Sun, 07 Jun 2020 00:00:00 +0000</pubDate><guid>https://shallowbrooksoftware.com/posts/a-multi-platform-modern-opengl-demo-with-sdl2/</guid><description>This post is largely inspired by Chris Wellons&amp;rsquo; 2015 blog post about writing a modern OpenGL demo that works on all three major desktop platforms (Windows, macOS, and Linux). I have come back to his post countless times over the years when looking for guidance on how to build any cross-platform C program.
In Chris&amp;rsquo; version of this demo he makes use of GLFW3 for the window and input handling and uses gl3w for loading OpenGL functions.</description></item><item><title>Bare-Metal Assembly on the Longan Nano</title><link>https://shallowbrooksoftware.com/posts/bare-metal-assembly-on-the-longan-nano/</link><pubDate>Fri, 24 Apr 2020 00:00:00 +0000</pubDate><guid>https://shallowbrooksoftware.com/posts/bare-metal-assembly-on-the-longan-nano/</guid><description>The Sipeed Longan Nano is a small, affordable, 32-bit RISC-V chip. Despite its minimalism, the Longan Nano provides enough power and peripherals to learn RISC-V assembly and build exciting programs along the way.
The Longan Nano comes with the following components:
GigaDevice GD32VF103[CBT6] 32-bit CPU 8 MHz default clock speed (IRC8M) 108 MHz maximum clock speed 128 KB flash storage 32 KB sram memory 3 LEDs (red, green, and blue) 1 USB Type-C port 1 microSD card slot 160x80 pixel LCD (0.</description></item><item><title>About Me</title><link>https://shallowbrooksoftware.com/about/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://shallowbrooksoftware.com/about/</guid><description>Welcome to Shallow Brook Software!
My name is Andrew Dailey and I&amp;rsquo;m a software developer located in Des Moines, Iowa. I have a Bachelor of Science degree in Software Engineering from Iowa State University (graduated in 2017). I have multiple years of industry experience working a variety of positions including Linux system administration, Python-based ETL, large-scale cluster automation, and full-stack web development. Software development is one of my primary hobbies and I tend to specialize in backend / systems programming.</description></item></channel></rss>